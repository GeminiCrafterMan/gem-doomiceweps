class PlayerSpawnLines : StaticEventHandler
{
    override void WorldLoaded(WorldEvent _event)
    {
        if (_event.IsSaveGame) return;
        
        let player = players[consoleplayer].mo;
		if (CVar.GetCVar('gwm_shutupmerc', players[consoleplayer]).GetBool() == false) 
        	player.A_StartSound("player/battlecry", CHAN_VOICE);
    }
    
    override void PlayerRespawned(PlayerEvent _event)
    {
        let player = players[_event.playernumber].mo;
		if (CVar.GetCVar('gwm_shutupmerc', players[_event.playernumber]).GetBool() == false) 
        	player.A_StartSound("player/respawn", CHAN_VOICE);
    }
}

class PandoraPointsHandler : StaticEventHandler
{
	override void WorldThingDied(WorldEvent e)
	{
		let player = players[consoleplayer].mo;
		
		if (e.Thing != null && e.Thing.bISMONSTER )
			
			{
				let victim = e.Thing.GetClassName();
				let victimHP = e.Thing.SpawnHealth();
			// G: Caused a crash; adding a null check + placeholder
				if (e.Thing.target)
					let killer = e.Thing.target.GetClassName();
				else
					let killer = player;
				
	//			{Console.Printf(victim .. " had " .. victimHP .. " spawn health, and was killed by " .. killer);}
				let Xdeathmultiplier = 1;
				let Elementmultiplier = 1;
				let pointstogive = victimHP * 0.2;
				
				if (e.Thing.health <= e.Thing.GetGibHealth())  { XDeathMultiplier = 2; Console.Printf("Gib Bonus!");}
			
				if(e.thing.CountInv("FireBurnCount")) { ElementMultiplier = ElementMultiplier * 1.5; Console.Printf("Fire Bonus!");}
				if(e.thing.CountInv("IceSlowCount")) { ElementMultiplier = ElementMultiplier * 1.5; Console.Printf("Ice Bonus!");}
				if(e.thing.CountInv("AcidWeakCount")) { ElementMultiplier = ElementMultiplier * 1.5; Console.Printf("Acid Bonus!");}
				
				if (e.thing.target != null)
					e.thing.target.GiveInventory("GWM_PandoraPoints", pointstogive * Xdeathmultiplier * 0.5);
				player.GiveInventory("GWM_PandoraPoints", pointstogive * Xdeathmultiplier * 0.5 * ElementMultiplier);
			}
			
			Super.WorldThingDied(e);
		}
			
		
	}

class GWM_PandoraPoints : Inventory
{
	Default
	{
	Inventory.Maxamount 99999;
	}
}

class GWM_PandoraPointsCap : Inventory
{
	Default
	{
	Inventory.Maxamount 99999;
	Inventory.Amount 1;
	}
}

class ThingReplacer : StaticEventHandler
{
    override void CheckReplacement(ReplaceEvent e)
    {
		// Monsters
        CVar replaceMonsters = CVar.FindCVar('gwm_replacemonsters');
		CVar noAltReplacements = CVar.FindCVar('gwm_noaltreplacements');
		CVar replaceWolfSS = CVar.FindCVar('gwm_replacewolfss');
        if (replaceMonsters.GetBool())
        {
			let cls = e.Replacee.GetClassName(); //Although not necessary, it helps out for simplification.
			if (noAltReplacements.GetBool())
			{
				switch(cls)
				{
					// Hitscanners
					case 'Zombieman':
						e.Replacement = "GWM_Zombieman";
						break;
					case 'ShotgunGuy':
						e.Replacement = "GWM_KahunaShotgunGuy";
						break;
					case 'ChaingunGuy':
						e.Replacement = "GWM_ChaingunGuy";
						break;
					// Imps and variants
					case 'DoomImp':
						e.Replacement = "GWM_DoomImp";
						break;
					case 'HellKnight':
						e.Replacement = "GWM_HellKnight";
						break;
					case 'BaronOfHell':
						e.Replacement = "GWM_BaronOfHell";
						break;
					case 'Cacodemon':
						e.Replacement = "GWM_Cacodemon";
						break;
					// Other monsters
					case 'Demon':
						e.Replacement = "GWM_Pinky";
						break;
					case 'Spectre':
						e.Replacement = "GWM_Spectre";
						break;
					case 'Cyberdemon':
						e.Replacement = "GWM_Cyberdemon";
						break;
					case 'LostSoul':
						e.Replacement = "GWM_LostSoul";
						break;
					case 'Arachnotron':
						e.Replacement = "GWM_Arachnotron";
						break;
					case 'Fatso':
						e.Replacement = "GWM_Mancubus";
						break;
					case 'PainElemental':
						e.Replacement = "GWM_PainElemental";
						break;
					case 'Revenant':
						e.Replacement = "GWM_Revenant";
						break;
					case 'SpiderMastermind':
						e.Replacement = "GWM_SpiderMastermind";
						break;
					case 'WolfensteinSS':
						if (replaceWolfSS.GetBool())
							e.Replacement = "GWM_WolfensteinSS";
						break;
					// Eviternity I & II
					case 'NightmareDemon':
						e.Replacement = "GWM_NightmareDemon";
						break;
					case 'Annihilator':
						e.Replacement = "GWM_Annihilator";
						break;
				}
			}
			else
			{
				switch(cls)
				{
					// Hitscanners
					case 'Zombieman':
						if (random(0, 3) == 3)
							e.Replacement = "GWM_SMGGuy";
						else
							e.Replacement = "GWM_Zombieman";
						break;
					case 'ShotgunGuy':
						switch (random(0, 5))
						{
							case 5:
								e.Replacement = "GWM_IceShotgunGuy";
								break;
							case 4:
								e.Replacement = "GWM_KahunaShotgunGuy";
								break;
							default:
								e.Replacement = "GWM_ShitShotgunGuySpawner";
								break;
						}
						break;
					case 'ChaingunGuy':
						if (random(0, 2) == 2)
							e.Replacement = "GWM_HeavyRifleman";

						if (random(0, 3) == 3)
							e.Replacement = "GWM_VulcanGuy";
						else
							e.Replacement = "GWM_ChaingunGuy";
						break;
					// Imps and Variants
					case 'DoomImp':
						switch (random(0,5))
						{
							case 5:
								e.Replacement = "GWM_CyberImp";
								break;
							case 4:
								e.Replacement = "GWM_Devil";
								break;
							default:
								e.Replacement = "GWM_DoomImpSpawner";
								break;
						}
						break;
					case 'HellKnight':
						if (random(0, 4) == 4)
							e.Replacement = "GWM_CyberHellKnight";
						else
							e.Replacement = "GWM_HellKnight";
						break;
					case 'BaronOfHell':
						string annihilator = "Annihilator";
						class<Actor> annihilatorAlreadyExists = annihilator;
						if (random(0, 4) == 4)
						{
							if (annihilatorAlreadyExists)
								e.Replacement = "GWM_BaronOfHell";
							else
								e.Replacement = "GWM_Annihilator";
						}
						else
							e.Replacement = "GWM_BaronOfHell";
						break;
					case 'Cacodemon':
						if (random(0, 4) == 4)
							e.Replacement = "GWM_DisCacodemon";
						else
							e.Replacement = "GWM_Cacodemon";
						break;
					// Other monsters
					case 'Demon':
						string nightmareDemon = "NightmareDemon";
						class<Actor> nightmareDemonAlreadyExists = nightmareDemon;
						switch (random(0,5))
						{
							case 5:
								if (nightmareDemonAlreadyExists)
									e.Replacement = "GWM_Pinky";
								else
									e.Replacement = "GWM_NightmareDemon";
								break;
							case 4:
								e.Replacement = "GWM_Hellhog";
								break;
							default:
								e.Replacement = "GWM_Pinky";
								break;
						}
						break;
					case 'Spectre':
						e.Replacement = "GWM_Spectre";
						break;
					case 'Cyberdemon':
						if (random(0,1) == 1)
							e.Replacement = "GWM_Superdemon";
						else
							e.Replacement = "GWM_Cyberdemon";
						break;
					case 'LostSoul':
						e.Replacement = "GWM_LostSoulSpawner"; // to spawn a Lost Soul or a Blot
						break;
					case 'Arachnotron':
						e.Replacement = "GWM_Arachnotron";
						break;
					case 'Fatso':
						e.Replacement = "GWM_Mancubus";
						break;
					case 'PainElemental':
						e.Replacement = "GWM_PainElemental";
						break;
					case 'Revenant':
						if (random(0,1) == 1)
							e.Replacement = "GWM_Draugr";
						else
							e.Replacement = "GWM_Revenant";
						break;
					case 'SpiderMastermind':
						e.Replacement = "GWM_SpiderMastermind";
						break;
					case 'WolfensteinSS':
						if (replaceWolfSS.GetBool())
							e.Replacement = "GWM_WolfensteinSS";
						break;
					// Eviternity I & II
					case 'NightmareDemon':
						e.Replacement = "GWM_NightmareDemon";
						break;
					case 'Annihilator':
						e.Replacement = "GWM_Annihilator";
						break;
					// Valiant... maybe
					case 'ValiantImp':
						e.Replacement = "GWM_Devil";
						break;
					case 'ValiantDemon':
						e.Replacement = "GWM_NightmareDemon";
						break;
					case 'ValiantCybruiser':
						e.Replacement = "GWM_Annihilator";
						break;
				}
			}
        }

		// Objects
        CVar replaceObjects = CVar.FindCVar('gwm_replaceobjects');
		if (replaceObjects.getBool())
		{
			let cls = e.Replacee.GetClassName(); //Although not necessary, it helps out for simplification.
			switch(cls)
			{
				case 'ExplosiveBarrel':
					e.Replacement = "GWM_ExplosiveBarrel";
					break;
				case 'DeadStick':
					switch (random(0,5))
					{
						case 5:
							e.Replacement = "GWM_DeadPinkyStick";
							break;
						case 4:
							e.Replacement = "GWM_DeadCacodemonStick";
							break;
						case 3:
							if (replaceMonsters.getBool())
							{
								e.Replacement = "GWM_DeadBaronStick";
								break;
							}
							else
							{
								e.Replacement = "GWM_DeadBaronStickGreenBlood";
								break;
							}
							break;
						case 2:
							e.Replacement = "GWM_DeadHellKnightStick";
							break;
						case 1:
							if (random(0,1) == 1)
							{
								e.Replacement = "GWM_DeadChaingunGuyStick1";
								break;
							}
							else
							{
								e.Replacement = "GWM_DeadChaingunGuyStick2";
								break;
							}
						default:
							e.Replacement = "DeadStick";
							break;
					}
					break;	// I can't believe I forgot this... The lack of this caused DeadStick-s to be turned into GWM_ExplosiveBarrel-s.
				case 'TangoBarrel':
					e.Replacement = "GWM_ExplosiveBarrel";
					break;
			}
		}

		// Weapons & Ammo
		if (noAltReplacements.GetBool())
		{
			let cls = e.Replacee.GetClassName(); //Although not necessary, it helps out for simplification.
			switch(cls)
			{
				case 'Chainsaw':
					e.Replacement = "GWM_Lumberjack"; 
					break;
				case 'Pistol':
					e.Replacement = "GWM_Pistol";
					break;
				case 'Shotgun':
					e.Replacement = "GWM_SlayersKahuna";
					break;
				case 'SuperShotgun':
					e.Replacement = "GWM_SuperShotgun";
					break;
				case 'Chaingun':
					e.Replacement = "GWM_MadVulcan";
					break;
				case 'RocketLauncher':
					e.Replacement = "GWM_RocketLauncher";
					break;
				case 'PlasmaRifle':
					e.Replacement = "GWM_PlasmaRifle";
					break;
				case 'BFG9000':
					e.Replacement = "GWM_BFG9000";
					break;
			// No Clip replacement because the chaingun requires high-cal, but the pistol requires low-cal
				case 'Shell':
					e.Replacement = "GWM_Shell";
					break;
				case 'ShellBox':
					e.Replacement = "GWM_ShellBox";
					break;
				case 'RocketAmmo':
					e.Replacement = "GWM_RocketAmmo";
					break;
				case 'RocketBox':
					e.Replacement = "GWM_RocketBox";
					break;
				case 'Cell':
					e.Replacement = "GWM_Cell";
					break;
				case 'CellPack':
					e.Replacement = "GWM_CellPack";
					break;
			}
		}

		// Stuff from other mapsets
		// check if the class exists first
		let cls = e.Replacee.GetClassName(); //Although not necessary, it helps out for simplification.
		switch(cls)
		{
		// Eviternity I & II
			case 'Perforator':
				e.Replacement = "GWM_Perforator";
				break;
		// Godless Night
			// weapons
			case 'TangoPistol':
				e.Replacement = "GWM_Pistol";
				break;
			case 'TangoShotgun':
				e.Replacement = "GWM_ShotgunSpawner";
				break;
			case 'TangoAssaultRifle':
				e.Replacement = "GWM_BurstRifle";
				break;
			case 'TangoChainsaw':
				e.Replacement = "GWM_ChainsawSpawner";
				break;
			case 'TangoMinigun':
				e.Replacement = "GWM_MadVulcan";
				break;
			case 'TangoPlasmaRifle':
				e.Replacement = "GWM_PlasmaRifleSpawner";
				break;
			case 'TangoSuperShotgun':
				e.Replacement = "GWM_SuperShotgunSpawner";
				break;
			case 'TangoRocketLauncher':
				e.Replacement = "GWM_RocketLauncher";
				break;
			case 'TangoStomper':
				e.Replacement = "GWM_Stomper";
				break;
			case 'TangoScrapgun':
				e.Replacement = "GWM_Scrapgun";
				break;
			case 'TangoBFG9000': // tango's is way fucking better but i have no choice
				e.Replacement = "GWM_BFG9000";
				break;
			// Nailgun seems to be unused and inaccessible
			// Ammo
			case 'TangoBulletClip':
				e.Replacement = "GWM_MagazineSpawner";
				break;
			case 'TangoBulletClipHalf':
				e.Replacement = "GWM_MagazineSpawner";
				break;
			case 'TangoBulletBox':
				e.Replacement = "GWM_MagazineBoxSpawner";
				break;
			case 'TangoShell':
				e.Replacement = "GWM_ShellSpawner";
				break;
			case 'TangoShellBox':
				e.Replacement = "GWM_ShellBoxSpawner";
				break;
			case 'TangoRocketAmmo':
				e.Replacement = "GWM_RocketAmmo";
				break;
			case 'TangoRocketBox':
				e.Replacement = "GWM_RocketBox";
				break;
			case 'TangoScrapDrum':
				e.Replacement = "GWM_ScrapDrum";
				break;
			case 'TangoScrapDrumPack':
				e.Replacement = "GWM_ScrapDrumPack";
				break;
			case 'TangoCell':
				e.Replacement = "GWM_Cell";
				break;
			case 'TangoCellPack':
				e.Replacement = "GWM_CellPack";
				break;
			case 'TangoStomperAmmo':
				e.Replacement = "GWM_StomperAmmo";
				break;
			case 'TangoStomperBox':
				e.Replacement = "GWM_StomperBox";
				break;
			// Nailgun seems to be unused and inaccessible
			case 'TangoBerserk':
				e.Replacement = "GWM_Berserk";
				break;
			case 'TangoVioletArmorSmall':
				e.Replacement = "GWM_Lv1ArmorSpawner";
				break;
			case 'TangoVioletArmorMedium':
				e.Replacement = "GWM_Lv1and2ArmorSpawner";
				break;
			case 'TangoVioletArmorLarge':
				e.Replacement = "GWM_Lv2ArmorSpawner";
				break;
			case 'TangoGreenArmor':
				e.Replacement = "GWM_Lv1ArmorSpawner";
				break;
			case 'TangoBlueArmor':
				e.Replacement = "GWM_Lv2ArmorSpawner";
				break;
			case 'TangoStimpack':
				e.Replacement = "GWM_Stimpack";
				break;
			case 'TangoMedkit':
				e.Replacement = "GWM_Medkit";
				break;
		}
    }
	override void CheckReplacee(ReplacedEvent e)
	{
		let cls = e.Replacement.GetClassName(); //Although not necessary, it helps out for simplification.
		switch(cls)
		{
			case 'GWM_BaronOfHell':
				e.Replacee = "BaronOfHell";
				break;
			case 'GWM_Annihilator':
				e.Replacee = "BaronOfHell";
				break;
			case 'GWM_Cyberdemon':
				e.Replacee = "Cyberdemon";
				break;
			case 'GWM_Superdemon':
				e.Replacee = "Cyberdemon";
				break;
			case 'GWM_SpiderMastermind':
				e.Replacee = "SpiderMastermind";
				break;
			case 'GWM_Arachnotron':
				e.Replacee = "Arachnotron";
				break;
			case 'GWM_Mancubus':
				e.Replacee = "Fatso";
				break;
		}
	}
}

class PowerTimeFreezer2 : Powerup
{
	Default
	{
		Powerup.Duration 2;
	}
	
	//===========================================================================
	//
	// InitEffect
	//
	//===========================================================================

	override void InitEffect()
	{
		int freezemask;

		Super.InitEffect();

		if (Owner == null || Owner.player == null)
			return;

		// Give the player and his teammates the power to move when time is frozen.
		freezemask = 1 << Owner.PlayerNumber();
		Owner.player.timefreezer |= freezemask;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] &&
				players[i].mo != null &&
				players[i].mo.IsTeammate(Owner)
			   )
			{
				players[i].timefreezer |= freezemask;
			}
		}

		// [RH] The effect ends one tic after the counter hits zero, so make
		// sure we start at an odd count.
		EffectTics += !(EffectTics & 1);
		if ((EffectTics & 1) == 0)
		{
			EffectTics++;
		}
		// Make sure the effect starts and ends on an even tic.
		if ((Level.maptime & 1) == 0)
		{
			Level.SetFrozen(true);
		}
		else
		{
			// Compensate for skipped tic, but beware of overflow.
			if(EffectTics < 0x7fffffff)
				EffectTics++;
		}
	}

	//===========================================================================
	//
	// APowerTimeFreezer :: DoEffect
	//
	//===========================================================================

	override void DoEffect()
	{
		Super.DoEffect();
		// [RH] Do not change LEVEL_FROZEN on odd tics, or the Revenant's tracer
		// will get thrown off.
		// [ED850] Don't change it if the player is predicted either.
		if (Level.maptime & 1 || (Owner != null && Owner.player != null && Owner.player.cheats & CF_PREDICTING))
		{
			return;
		}
		// [RH] The "blinking" can't check against EffectTics exactly or it will
		// never happen, because InitEffect ensures that EffectTics will always
		// be odd when Level.maptime is even.
		Level.SetFrozen ( EffectTics > 4*32 
			|| (( EffectTics > 3*32 && EffectTics <= 4*32 ) && ((EffectTics + 1) & 15) != 0 )
			|| (( EffectTics > 2*32 && EffectTics <= 3*32 ) && ((EffectTics + 1) & 7) != 0 )
			|| (( EffectTics >   32 && EffectTics <= 2*32 ) && ((EffectTics + 1) & 3) != 0 )
			|| (( EffectTics >    0 && EffectTics <= 1*32 ) && ((EffectTics + 1) & 1) != 0 ));
	}

	//===========================================================================
	//
	// APowerTimeFreezer :: EndEffect
	//
	//===========================================================================

	override void EndEffect()
	{
		Super.EndEffect();

		// If there is an owner, remove the timefreeze flag corresponding to
		// her from all players.
		if (Owner != null && Owner.player != null)
		{
			int freezemask = ~(1 << Owner.PlayerNumber());
			for (int i = 0; i < MAXPLAYERS; ++i)
			{
				players[i].timefreezer &= freezemask;
			}
		}

		// Are there any players who still have timefreezer bits set?
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i] && players[i].timefreezer != 0)
			{
				return;
			}
		}

		// No, so allow other actors to move about freely once again.
		Level.SetFrozen(false);

		// Also, turn the music back on.
		S_ResumeSound(false);
	}
}

Class PowerMenuInvul : PowerProtection
{
Default
{
  DamageFactor "", 0.0;
  Powerup.Duration 2;
}
}