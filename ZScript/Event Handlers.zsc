class PlayerSpawnLines : StaticEventHandler
{
    override void WorldLoaded(WorldEvent _event)
    {
        if (_event.IsSaveGame) return;
        
        let player = players[consoleplayer].mo;
        player.A_StartSound("player/battlecry", CHAN_VOICE);
    }
    
    override void PlayerRespawned(PlayerEvent _event)
    {
        let player = players[_event.playernumber].mo;
        player.A_StartSound("player/respawn", CHAN_VOICE);
    }
}

class ThingReplacer : StaticEventHandler
{
    override void CheckReplacement(ReplaceEvent e)
    {
		// Monsters
        CVar replaceMonsters = CVar.FindCVar('gwm_replacemonsters');
		CVar noAltReplacements = CVar.FindCVar('gwm_noaltreplacements');
        if (replaceMonsters.GetBool())
        {
			let cls = e.Replacee.GetClassName(); //Although not necessary, it helps out for simplification.
			if (noAltReplacements.GetBool())
			{
				switch(cls)
				{
					// Hitscanners
					case 'Zombieman':
						e.Replacement = "GWM_Zombieman";
						break;
					case 'ShotgunGuy':
						e.Replacement = "GWM_KahunaShotgunGuy";
						break;
					case 'ChaingunGuy':
						e.Replacement = "GWM_ChaingunGuy";
						break;
					// Imps and variants
					case 'DoomImp':
						e.Replacement = "GWM_DoomImp";
						break;
					case 'HellKnight':
						e.Replacement = "GWM_HellKnight";
						break;
					case 'BaronOfHell':
						e.Replacement = "GWM_BaronOfHell";
						break;
					case 'Cacodemon':
						e.Replacement = "GWM_Cacodemon";
						break;
					// Other monsters
					case 'Demon':
						e.Replacement = "GWM_Pinky";
						break;
					case 'Spectre':
						e.Replacement = "GWM_Spectre";
						break;
					case 'Cyberdemon':
						e.Replacement = "GWM_Cyberdemon";
						break;
					case 'LostSoul':
						e.Replacement = "GWM_LostSoul";
						break;
					case 'Arachnotron':
						e.Replacement = "GWM_Arachnotron";
						break;
					case 'Fatso':
						e.Replacement = "GWM_Mancubus";
						break;
					case 'Revenant':
						e.Replacement = "GWM_Revenant";
						break;
					case 'SpiderMastermind':
						e.Replacement = "GWM_SpiderMastermind";
						break;
					case 'WolfensteinSS':
						e.Replacement = "GWM_WolfensteinSS";
						break;
				}
			}
			else
			{
				switch(cls)
				{
					// Hitscanners
					case 'Zombieman':
						if (random(0, 3) == 3)
							e.Replacement = "GWM_SMGGuy";
						else
							e.Replacement = "GWM_Zombieman";
						break;
					case 'ShotgunGuy':
						if (random(0, 3) == 3)
							e.Replacement = "GWM_IceShotgunGuy";
						else
							e.Replacement = "GWM_KahunaShotgunGuySpawner"; // to spawn a Kahuna Shotgun Guy or a Shadow Hunter
						break;
					case 'ChaingunGuy':
						if (random(0, 1) == 1)
							e.Replacement = "GWM_HeavyRifleman";
						else
							e.Replacement = "GWM_ChaingunGuy";
						break;
					// Imps and Variants
					case 'DoomImp':
						switch (random(0,5))
						{
							case 5:
								e.Replacement = "GWM_CyberImp";
								break;
							case 4:
								e.Replacement = "GWM_Devil";
								break;
							default:
								e.Replacement = "GWM_DoomImpSpawner";
								break;
						}
						break;
					case 'HellKnight':
						if (random(0, 4) == 4)
							e.Replacement = "GWM_CyberHellKnight";
						else
							e.Replacement = "GWM_HellKnight";
						break;
					case 'BaronOfHell':
						if (random(0, 4) == 4)
							e.Replacement = "GWM_CyberBaron";
						else
							e.Replacement = "GWM_BaronOfHell";
						break;
					case 'Cacodemon':
						e.Replacement = "GWM_Cacodemon";
						break;
					// Other monsters
					case 'Demon':
						if (random(0, 4) == 4)
							e.Replacement = "GWM_Hellhog";
						else
							e.Replacement = "GWM_Pinky";
						break;
					case 'Spectre':
						e.Replacement = "GWM_Spectre";
						break;
					case 'Cyberdemon':
						if (random(0,1) == 1)
							e.Replacement = "GWM_Superdemon";
						else
							e.Replacement = "GWM_Cyberdemon";
						break;
					case 'LostSoul':
						e.Replacement = "GWM_LostSoulSpawner"; // to spawn a Lost Soul or a Blot
						break;
					case 'Arachnotron':
						e.Replacement = "GWM_Arachnotron";
						break;
					case 'Fatso':
						e.Replacement = "GWM_Mancubus";
						break;
					case 'Revenant':
						e.Replacement = "GWM_Revenant";
						break;
					case 'SpiderMastermind':
						e.Replacement = "GWM_SpiderMastermind";
						break;
					case 'WolfensteinSS':
						e.Replacement = "GWM_WolfensteinSS";
						break;
				}
			}
        }

		// Objects
        CVar replaceObjects = CVar.FindCVar('gwm_replaceobjects');
		if (replaceObjects.getBool())
		{
			let cls = e.Replacee.GetClassName(); //Although not necessary, it helps out for simplification.
			switch(cls)
			{
				case 'ExplosiveBarrel':
					e.Replacement = "GWM_ExplosiveBarrel";
					break;
				case 'DeadStick':
					if (random(0,2) == 2)
					{
						if (replaceMonsters.getBool())
						{
							e.Replacement = "GWM_DeadBaronStick";
							break;
						}
						else
						{
							e.Replacement = "GWM_DeadBaronStickGreenBlood";
							break;
						}
					}
					else if (random(0,2) == 1)
					{
						e.Replacement = "GWM_DeadHellKnightStick";
						break;
					}
			}
		}

		// Weapons & Ammo
		if (noAltReplacements.GetBool())
		{
			let cls = e.Replacee.GetClassName(); //Although not necessary, it helps out for simplification.
			switch(cls)
			{
				case 'Chainsaw':
					e.Replacement = "GWM_Lumberjack"; 
					break;
				case 'Pistol':
					e.Replacement = "GWM_Pistol";
					break;
				case 'Shotgun':
					e.Replacement = "GWM_Shotgun";
					break;
				case 'SuperShotgun':
					e.Replacement = "GWM_SuperShotgun";
					break;
				case 'Chaingun':
					e.Replacement = "GWM_Chaingun";
					break;
				case 'RocketLauncher':
					e.Replacement = "GWM_RocketLauncher";
					break;
				case 'PlasmaRifle':
					e.Replacement = "GWM_PlasmaRifle";
					break;
				case 'BFG9000':
					e.Replacement = "GWM_BFG9000";
					break;
			// No Clip replacement because the chaingun requires high-cal, but the pistol requires low-cal
				case 'Shell':
					e.Replacement = "GWM_Shell";
					break;
				case 'ShellBox':
					e.Replacement = "GWM_ShellBox";
					break;
				case 'RocketAmmo':
					e.Replacement = "GWM_RocketAmmo";
					break;
				case 'RocketBox':
					e.Replacement = "GWM_RocketBox";
					break;
				case 'Cell':
					e.Replacement = "GWM_Cell";
					break;
				case 'CellPack':
					e.Replacement = "GWM_CellPack";
					break;
			}
		}

		// Weapons from other mapsets
		// check if the class exists first
		let cls = e.Replacee.GetClassName(); //Although not necessary, it helps out for simplification.
		switch(cls)
		{
		// Eviternity II
			case 'Perforator':
				e.Replacement = "GWM_Perforator";
				break;
		// Godless Night
			// weapons
			case 'TangoPistol':
				e.Replacement = "GWM_Pistol";
				break;
			case 'TangoShotgun':
				e.Replacement = "GWM_ShotgunSpawner"; // Spawns either a Shotgun or an Ice Shotgun.
				break;
			case 'TangoAssaultRifle':
				e.Replacement = "GWM_BurstRifle";
				break;
			case 'TangoChainsaw':
				e.Replacement = "GWM_Lumberjack";
				break;
			case 'TangoMinigun':
				e.Replacement = "GWM_Chaingun";
				break;
			case 'TangoPlasmaRifle':
				e.Replacement = "GWM_PlasmaRifleSpawner";
				break;
			case 'TangoSuperShotgun':
				e.Replacement = "GWM_SuperShotgunSpawner";
				break;
			case 'TangoRocketLauncher':
				e.Replacement = "GWM_RocketLauncher";
				break;
			case 'TangoStomper':
				e.Replacement = "GWM_VenomCannon";
				break;
			case 'TangoScrapgun':
				e.Replacement = "GWM_Flamethrower";
				break;
			case 'TangoBFG9000': // tango's is way fucking better but i have no choice
				e.Replacement = "GWM_BFG9000";
				break;
			// Nailgun seems to be unused and inaccessible
			// Ammo
			case 'TangoBulletClip':
				e.Replacement = "GWM_ClipSpawner";
				break;
			case 'TangoBulletBox':
				e.Replacement = "GWM_ClipBoxSpawner";
				break;
			case 'TangoShell':
				e.Replacement = "GWM_ShellSpawner";
				break;
			case 'TangoShellBox':
				e.Replacement = "GWM_ShellBoxSpawner";
				break;
			case 'TangoRocketAmmo':
				e.Replacement = "GWM_RocketAmmo";
				break;
			case 'TangoRocketBox':
				e.Replacement = "GWM_RocketBox";
				break;
			case 'TangoScrapDrum':
				e.Replacement = "GWM_Gas";
				break;
			case 'TangoScrapDrumPack':
				e.Replacement = "GWM_BigGas";
				break;
			case 'TangoCell':
				e.Replacement = "GWM_Cell";
				break;
			case 'TangoCellPack':
				e.Replacement = "GWM_CellPack";
				break;
			case 'TangoStomperAmmo':
				e.Replacement = "GWM_VenomVial";
				break;
			case 'TangoStomperBox':
				e.Replacement = "GWM_LargeVenomVial";
				break;
			// Nailgun seems to be unused and inaccessible
		}
    }
	override void CheckReplacee(ReplacedEvent e)
	{
		let cls = e.Replacement.GetClassName(); //Although not necessary, it helps out for simplification.
		switch(cls)
		{
			case 'GWM_BaronOfHell':
				e.Replacee = "BaronOfHell";
				break;
			case 'GWM_CyberBaron':
				e.Replacee = "BaronOfHell";
				break;
			case 'GWM_Cyberdemon':
				e.Replacee = "Cyberdemon";
				break;
			case 'GWM_Superdemon':
				e.Replacee = "Cyberdemon";
				break;
			case 'GWM_SpiderMastermind':
				e.Replacee = "SpiderMastermind";
				break;
			case 'GWM_Arachnotron':
				e.Replacee = "Arachnotron";
				break;
			case 'GWM_Mancubus':
				e.Replacee = "Fatso";
				break;
		}
	}
}