class GWM_HealthBonus : HealthBonus replaces HealthBonus
{
	Default
	{
		Inventory.MaxAmount 300;
		Inventory.PickupSound "pickups/healthbonus";
	}
}

class GWM_ArmorBonus : ArmorBonus replaces ArmorBonus
{
	Default
	{
		Armor.MaxSaveAmount 300;
		Inventory.PickupSound "pickups/armorbonus";
	}
}

class GWM_Soulsphere : Soulsphere replaces Soulsphere
{
	Default
	{
		Inventory.MaxAmount 300;
	}
}

class GWM_Backpack : Backpack replaces Backpack
{
	Default
	{
		Inventory.PickupSound "pickups/backpack";
	}
}

class GWM_Berserk : Berserk replaces Berserk
{
	override void Touch(Actor toucher) {
		toucher.A_StartSound("player/berserk", CHAN_VOICE);
		Super.Touch(toucher);
	}
	States
	{
		Pickup:
			TNT1 A 0 {
				A_GiveInventory("PowerStrength");
				HealThing(100, 0);
				A_SelectWeapon("GWM_Fist");
			}
			Stop;
	}
}

class GWM_BlurSphere : BlurSphere {}

class GWM_DrainSphere : PowerupGiver
{
	Default
	{
		Inventory.PickupMessage "$GOTLIFEDRAIN";
		Inventory.Icon "VAMPA0";
		Powerup.Color "FF0000", 0.25;
		Inventory.MaxAmount 0;
		Inventory.UseSound "pickups/slowmo";
		Powerup.Type "PowerDrain";
		Powerup.Duration 1000;
		+INVENTORY.AUTOACTIVATE
		+RANDOMIZE
	}
	States
	{
		Spawn:
			VAMP ABCD 4 Bright;
			Loop;
	}
}

class GWM_InvulnerabilitySphere : InvulnerabilitySphere {}

class GWM_ReflectSphere : PowerupGiver
{
	Default
	{
		Inventory.PickupMessage "$GOTREFLECTIVE";
		Inventory.Icon "REFLA0";
		Powerup.Color "0011FF", 0.25;
		Inventory.MaxAmount 0;
		Inventory.UseSound "pickups/slowmo";
		Powerup.Type "PowerInvulnerable";
		Powerup.Mode "Reflective";
		Powerup.Duration -30; // 30 seconds
		+INVENTORY.AUTOACTIVATE
		+RANDOMIZE
	}
	States
	{
		Spawn:
			REFL ABCD 4 Bright;
			Loop;
	}
}

//you dont really need custom inventory for this
Class GWM_Stopwatch : inventory
{
	default
	{
		+NOGRAVITY
		+FLOATBOB
		+INVENTORY.INVBAR
		+NOTIMEFREEZE
		Inventory.Icon "WTCHA0";
		Tag "Stopwatch";
		Inventory.MaxAmount 4;
		Inventory.PickupMessage "$GOTSTOPWATCH";
	}
	states
	{
		Spawn:
			WTCH A 1 Bright A_SpawnItemEx("GWM_StopwatchSparkle", 12, xvel: 0.5, zvel: 1, angle: random(0, 359), flags: SXF_NOCHECKPOSITION);
			Loop;
	}
	
	override Bool Use(bool pickup)
	{
		//get the previous weapon
		weapon prev = owner.player.readyweapon;
		
		//you dont want to set the animation weapon as the prev weapon
		if(prev is "GWM_StopwatchAnimation")
			return false;
		
		//give the animation weapon to the player
		owner.Giveinventory("GWM_StopwatchAnimation",1);
		//cast it to that specific weapon class type to access its prevweapon variable and assign it
		GWM_StopwatchAnimation watch = GWM_StopwatchAnimation(owner.findinventory("GWM_StopwatchAnimation"));
		if(watch)
			watch.prevweapon = prev;
			
		//set the new weapon as the selected weapon
		owner.player.readyweapon = null;
		owner.player.pendingweapon = watch;
		return true;
	}
}
class GWM_StopwatchAnimation : Weapon
{
	Default
	{
		+NOTIMEFREEZE
		Tag "Stopwatch";
	}
	weapon prevweapon;
	States
	{
		Select:
			WTCH B 1 A_Raise(12);
			Loop; // goes to Ready
		Ready:
		Fire:
			WTCH B 40 A_StartSound("powerups/time_stop_start");
			WTCH B 7 A_GiveInventory("GWM_StopwatchStopper",1);
			TNT1 A 0 {
				player.pendingweapon = invoker.prevweapon;
				A_TakeInventory("GWM_StopwatchAnimation");
			}
			Stop;
		Deselect:
			WTCH B 1 A_Lower(12);
			Loop;
	}
}
class GWM_StopwatchStopper : PowerupGiver
{
	Default
	{
		+NOTIMEFREEZE
		-INVENTORY.INVBAR
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.UNDROPPABLE
		Powerup.Type "GWM_PowerTimeFreezer";
//		Powerup.Color "888888", 0.5;
		Powerup.Colormap 0.0, 0.0, 0.0, 0.5, 0.5, 0.5;
		Powerup.Duration -15; // 15 seconds
	}
}
class GWM_PowerTimeFreezer : PowerTimeFreezer
{
	override void EndEffect()
	{
		Super.EndEffect();
		if(owner)
			owner.A_StartSound("powerups/time_stop_end");
	}
}
class GWM_StopwatchSparkle : Actor
{
	Default
	{
		+NOTIMEFREEZE
		+NOINTERACTION
	}
	States
	{
		Spawn:
			WTCH DEFGH 2 Bright;
			Stop;
	}
}