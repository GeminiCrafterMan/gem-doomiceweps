class GWM_Stimpack : CustomInventory replaces Stimpack
{
	Default
	{
		Inventory.PickupMessage "";
		Inventory.PickupSound "pickups/healthitem";
	}
	States
	{
		Spawn:
			STIM A 1;
			loop;
		Pickup:
			TNT1 A 0 A_Jumpifhealthlower(GetMaxHealth(true),"Heal");
			goto FailToHeal;
		Heal:
			TNT1 A 0 {
				if (Health < 25)
					A_Log("$GOTSTIMPACKNEED", true);
				else
					A_Log("$GOTSTIMPACK", true);
			}
			TNT1 A 0 GiveInventory("GWM_HealAmount",10);
			stop;
		FailToHeal:
			TNT1 A 0;
			fail;
	}
}

class GWM_Medkit : CustomInventory replaces Medikit
{
	Default
	{
		Inventory.PickupMessage "";
		Inventory.PickupSound "pickups/healthitem";
	}
	States
	{
		Spawn:
			MEDI A 1;
			loop;
		Pickup:
			TNT1 A 0 A_Jumpifhealthlower(GetMaxHealth(true),"Heal");
			goto FailToHeal;
		Heal:
			TNT1 A 0 {
				if (Health < 25)
					A_Log("$GOTMEDKITNEED", true);
				else
					A_Log("$GOTMEDKIT", true);
			}
			TNT1 A 0 GiveInventory("GWM_HealAmount",25);
			stop;
		FailToHeal:
			TNT1 A 0;
			fail;
	}
}

class GWM_HealthBonus : HealthBonus replaces HealthBonus
{
	Default
	{
		//$Category Pickups
		//$Title "Health Bonus
		Inventory.PickupSound "pickups/healthbonus";
		Inventory.PickupMessage "$GOTHEALTHBONUS";
	}
}

class GWM_ArmorBonus : ArmorBonus replaces ArmorBonus
{
	Default
	{
		//$Category Pickups
		//$Title "Armor Bonus
		Armor.MaxSaveAmount 300;
		Inventory.PickupSound "pickups/armorbonus";
		Inventory.PickupMessage "$GOTARMORBONUS";
	}
}

class GWM_Backpack : Backpack replaces Backpack
{
	Default
	{
		//$Category Pickups
		//$Title "Backpack
		Inventory.PickupSound "pickups/backpack";
	}
}

class GWM_Berserk : Berserk
{
	override void Touch(Actor toucher) {
		if (CVar.GetCVar('gwm_shutupmerc', toucher.player).GetBool() == false) 
			toucher.A_StartSound("player/berserk", CHAN_VOICE);
		Super.Touch(toucher);
	}
	Default
	{
		//$Category Pickups
		//$Title "Berserk
	}
	States
	{
		Pickup:
			TNT1 A 0 {
				A_GiveInventory("GWM_PowerStrength");
				HealThing(100, 0);
				A_SetBlend("Red", .25, 35); // from Supercharge
			}
			Stop;
	}
}
class GWM_PowerStrength : PowerStrength replaces PowerStrength
{
	Default
	{
		Powerup.Duration 1;
		Powerup.Color "000000", 0.0;
		+INVENTORY.HUBPOWER
	}
}

class GWM_Soulsphere : Soulsphere
{
	Default
	{
		//$Category Pickups
		//$Title "Soulsphere
	}
}
class GWM_BlurSphere : BlurSphere
{
	Default
	{
		//$Category Pickups
		//$Title "Partial Invisibility
	}
}

class GWM_DrainSphere : PowerupGiver
{
	Default
	{
		//$Category Pickups
		//$Title "Life Drain
		Inventory.PickupMessage "$GOTLIFEDRAIN";
		Inventory.Icon "VAMPA0";
		Powerup.Color "FF0000", 0.25;
		Inventory.MaxAmount 0;
		Inventory.UseSound "pickups/slowmo";
		Powerup.Type "PowerDrain";
		Powerup.Duration 1000;
		+INVENTORY.AUTOACTIVATE
		+RANDOMIZE
	}
	States
	{
		Spawn:
			VAMP ABCD 4 Bright;
			Loop;
	}
}

class GWM_InvulnerabilitySphere : InvulnerabilitySphere
{
	Default
	{
		//$Category Pickups
		//$Title "Invulnerability
	}
}

class GWM_ReflectSphere : PowerupGiver
{
	Default
	{
		//$Category Pickups
		//$Title "Reflective Shots
		Inventory.PickupMessage "$GOTREFLECTIVE";
		Inventory.Icon "REFLA0";
		Powerup.Color "0011FF", 0.25;
		Inventory.MaxAmount 0;
		Inventory.UseSound "pickups/slowmo";
		Powerup.Type "PowerInvulnerable";
		Powerup.Mode "Reflective";
		Powerup.Duration -30; // 30 seconds
		+INVENTORY.AUTOACTIVATE
		+RANDOMIZE
	}
	States
	{
		Spawn:
			REFL ABCD 4 Bright;
			Loop;
	}
}

//you dont really need custom inventory for this
Class GWM_Stopwatch : Inventory
{
	default
	{
		//$Category Pickups
		//$Title "Stopwatch
		//$Sprite WTCHA0
		+NOGRAVITY
		+FLOATBOB
		+INVENTORY.INVBAR
		+NOTIMEFREEZE
		Inventory.Icon "WTCHA0";
		Tag "Stopwatch";
		Inventory.MaxAmount 4;
		Inventory.PickupMessage "$GOTSTOPWATCH";
	}
	states
	{
		Spawn:
			WTCH A 1 Bright A_SpawnItemEx("GWM_StopwatchSparkle", 12, xvel: 0.5, zvel: 1, angle: random(0, 359), flags: SXF_NOCHECKPOSITION);
			Loop;
	}
	
	override Bool Use(bool pickup)
	{
		//get the previous weapon
		weapon prev = owner.player.readyweapon;
		
		//you dont want to set the animation weapon as the prev weapon
		if(prev is "GWM_StopwatchAnimation")
			return false;
		
		//give the animation weapon to the player
		owner.Giveinventory("GWM_StopwatchAnimation",1);
		//cast it to that specific weapon class type to access its prevweapon variable and assign it
		GWM_StopwatchAnimation watch = GWM_StopwatchAnimation(owner.findinventory("GWM_StopwatchAnimation"));
		if(watch)
			watch.prevweapon = prev;
			
		//set the new weapon as the selected weapon
		owner.player.readyweapon = null;
		owner.player.pendingweapon = watch;
		return true;
	}
}
class GWM_StopwatchAnimation : Weapon
{
	Default
	{
		+NOTIMEFREEZE
		Tag "Stopwatch";
	}
	weapon prevweapon;
	States
	{
		Select:
			WTCH B 1 A_Raise(18);
			Loop; // goes to Ready
		Ready:
		Fire:
			WTCH B 40 A_StartSound("powerups/time_stop_start");
			WTCH B 7 A_GiveInventory("GWM_StopwatchStopper",1);
			TNT1 A 0 {
				player.pendingweapon = invoker.prevweapon;
				A_TakeInventory("GWM_StopwatchAnimation");
			}
			Stop;
		Deselect:
			WTCH B 1 A_Lower(18);
			Loop;
	}
}
class GWM_StopwatchStopper : PowerupGiver
{
	Default
	{
		+NOTIMEFREEZE
		-INVENTORY.INVBAR
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.UNDROPPABLE
		Powerup.Type "GWM_PowerTimeFreezer";
//		Powerup.Color "888888", 0.5;
		Powerup.Colormap 0.0, 0.0, 0.0, 0.5, 0.5, 0.5;
		Powerup.Duration -15; // 15 seconds
	}
}
class GWM_PowerTimeFreezer : PowerTimeFreezer
{
	override void EndEffect()
	{
		Super.EndEffect();
		if(owner)
			owner.A_StartSound("powerups/time_stop_end");
	}
}
class GWM_StopwatchSparkle : Actor
{
	Default
	{
		+NOTIMEFREEZE
		+NOINTERACTION
	}
	States
	{
		Spawn:
			WTCH DEFGH 2 Bright;
			Stop;
	}
}

class GWM_PortableMedkit : Inventory
{
    override bool Use(bool pickup)
    {
		int firstAidAmount;
		firstAidAmount = owner.CountInv("GWM_PortableMedkit");

		if (!owner || !owner.player || owner.player.Health > owner.GetMaxHealth(true) || !owner.FindInventory("GWM_PortableMedkit"))
		return false;

		if (owner.player.Health < owner.GetMaxHealth(true) && firstAidAmount != 0)
		{
			owner.A_StartSound("powerups/portable_medkit", CHAN_ITEM); 
			int toheal = owner.GetMaxHealth(true) - owner.player.Health; //Check how much to heal

			If(toheal > firstAidAmount)  //If that amount is larger than the amount of charge, set it to be equal
			{
				toheal = firstAidAmount;
			}
			owner.GiveBody(toheal); //Heal the player that amount
			owner.A_TakeInventory("GWM_PortableMedkit", toheal); //Take that amount of charge
		}
		return Super.Use(pickup);
	}
	Default
	{
		//$Category Pickups
		//$Title "Portable Medkit
		+INVENTORY.INVBAR;
		Inventory.Amount 100;
		Inventory.MaxAmount 300;
		Inventory.InterHubAmount 300;
		Inventory.PickUpMessage "$GOTPORTABLEMEDKIT";
		Inventory.Icon "PKITA0";
		Tag "Portable Medkit";
	}
	States
	{
		Spawn:
			PKIT A -1;
			Stop;
	}
}

class GWM_LightAmpVisor : Infrared replaces Infrared // Exists solely to free up the PVIS sprite name for mapsets like Valiant, so Pyro Knights don't turn into light-amp goggles.
{
	States
	{
		Spawn:
			AMPV A 6 Bright;
			AMPV B 6;
			Loop;
	}
}