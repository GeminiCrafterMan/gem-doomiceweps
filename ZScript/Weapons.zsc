// Doom
#include "ZScript/Weapons/Slot 1/GWM_Mine.zsc"				// land mine 
#include "ZScript/Weapons/Slot 1/GWM_Fist.zsc"				// Fist, taken from Super Skulltag and rewritten slightly.
#include "ZScript/Weapons/Slot 1/GWM_Impactor.zsc"			// Impactor Gauntlet, taken from Realm667.
#include "ZScript/Weapons/Slot 1/GWM_Icebreaker.zsc"		// Icebreaker drill, edited off of a nailgun by Captain J.

#include "ZScript/Weapons/Slot 2/GWM_Pistol.zsc"			// Beretta 92FS
#include "ZScript/Weapons/Slot 2/GWM_SMG.zsc"				// SMG
#include "ZScript/Weapons/Slot 2/GWM_MP40.zsc"				// MP40

#include "ZScript/Weapons/Slot 3/GWM_Shotgun.zsc"			// Slayer's Kahuna
#include "ZScript/Weapons/Slot 3/GWM_SuperShotgun.zsc"		// Super Shotgun
#include "ZScript/Weapons/Slot 3/GWM_IceShotgun.zsc"		// Ice Shotgun
#include "ZScript/Weapons/Slot 3/GWM_PFSuperShotgun.zsc"	// Perfect Freeze Super Shotgun

#include "ZScript/Weapons/Slot 4/GWM_Chaingun.zsc"			// Chaingun
#include "ZScript/Weapons/Slot 4/GWM_BurstRifle.zsc"		// Burst Rifle

#include "ZScript/Weapons/Slot 5/GWM_RocketLauncher.zsc"	// Rocket Launcher
#include "ZScript/Weapons/Slot 5/GWM_VenomCannon.zsc"		// Venom Cannon (poison goop gun)

#include "ZScript/Weapons/Slot 6/GWM_PlasmaRifle.zsc"		// Plasma Rifle
#include "ZScript/Weapons/Slot 6/GWM_Melter.zsc"			// Melter

#include "ZScript/Weapons/Slot 7/GWM_BFG9000.zsc"			// BFG9000 (Vanilla)

// Heretic
#include "ZScript/Weapons/Slot 1/GWM_Levenbrech.zsc"		// Levenbrech

#include "ZScript/Weapons/Slot 2/GWM_GoldWand.zsc"			// Gold Wand

#include "ZScript/Weapons/Slot 3/GWM_ImpalerCrossbow.zsc"	// Impaler Crossbow

#include "ZScript/Weapons/Slot 4/GWM_FrostFang.zsc"			// Frost Fang


// Base weapon class
class GWM_WeaponBase : DoomWeapon
{
	/*
	Ejects a bullet casing to the side.
	Params:
	 - casingType: Type of actor to eject.
	 - left: If true, casing ejects to the left. Otherwise it ejects to the right.
	 - ejectPitch: Pitch at which casing ejects, relative to view direction.
	 - speed: Speed at which casing ejects.
	 - accuracy: Random spread, in degrees.
	 - offset: Offset from which casing is ejected, relative to center of view.
	*/
	action void ZWL_EjectCasing(class<Actor> casingType, bool left = false, double ejectPitch = -45, double speed = 4,
								double accuracy = 8, Vector3 offset = (24, 0, -10))
	{
		// Find offset vector
		// +y axis is to the right for offsets
		offset.y *= -1;

		// Rotate offset by pitch
		Vector2 xz = RotateVector((offset.x, offset.z), -pitch);
		offset.x = xz.x;
		offset.z = xz.y;

		// Rotate vector by angle
		offset.xy = RotateVector(offset.xy, angle);

		// Move to player camera
		offset.xy += pos.xy;
		offset.z += player.viewZ;

		// Find velocity vector
		Vector3 side = (Cos(angle + (left ? 90 : -90)), Sin(angle + (left ? 90 : -90)), 0);
		Vector3 up = (Cos(pitch-90) * Cos(angle), Cos(pitch-90) * Sin(angle), -Sin(pitch-90));
		Vector3 baseDirection = Cos(-ejectPitch) * side + Sin(-ejectPitch) * up;

		double baseAngle = VectorAngle(baseDirection.x, baseDirection.y);
		baseDirection.xy = RotateVector(baseDirection.xy, -baseAngle);
		double basePitch = -VectorAngle(baseDirection.x, baseDirection.z);

		double casAngle, casPitch;
		[casAngle, casPitch] = invoker.BulletAngle(accuracy, baseAngle, basePitch);

		let casing = Spawn(casingType, offset);
		casing.Vel3dFromAngle(speed, casAngle, casPitch);
		casing.vel += vel;
	}
	// Returns random angle and pitch within cone
	// I have no idea if there's a better way of doing this ¯\_(ツ)_/¯
	// Params:
	//  - accuracy: maximum angle b/w cone's axis, and bullet trajectory
	//  - angle: angle of axis
	//  - pitch: pitch of axis
	double, double BulletAngle(double accuracy, double angle, double pitch)
	{
		Vector3 v = (0, 0, 0);

		if (accuracy > 10)
		{
			// Generate random vector in sphere section
			Vector3 axis = (Cos(pitch) * Cos(angle), Cos(pitch) * Sin(angle), -Sin(pitch));
			while (v == (0, 0, 0) || v.Length() > 1 || ACos(axis dot v.Unit()) > accuracy)
			{
				v = (FRandom(-1, 1), FRandom(-1, 1), FRandom(-1, 1));
			}

			// Extract angle and pitch from trajectory
			angle = VectorAngle(v.x, v.y);
			pitch = -ASin(v.z / v.Length());
		}
		else if (accuracy > 0)
		{
			// Generate random vector in sphere around end of axis
			double r = Sin(accuracy);
			while (v == (0, 0, 0) || v.Length() > r)
			{
				v = (FRandom(-r, r), FRandom(-r, r), FRandom(-r, r));
			}

			Vector3 axis = (Cos(pitch) * Cos(angle), Cos(pitch) * Sin(angle), -Sin(pitch));
			v += axis;

			// Extract angle and pitch from trajectory
			angle = VectorAngle(v.x, v.y);
			pitch = -ASin(v.z / v.Length());
		}

		return angle, pitch;
	}
	Default
	{
		+THRUGHOST
		Weapon.UpSound "weapons/draw_default";
		Obituary "$KILLPLACEHOLDER";
		Tag "Weapon base";
		Weapon.BobStyle "Smooth";
	}
}