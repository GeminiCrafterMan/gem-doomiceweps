class PFSuperShotgun : SuperShotgun
{
	bool PFShotDirected;
	int PFCooldown;
	array <Actor> projs;
	action void A_FireFrozenProjectiles() {
		double atkheight = height * 0.5 - floorclip + player.mo.AttackZOffset*player.crouchFactor;
		// fire linetrace:
		FlineTraceData trc;
		LineTrace(angle, 4096, pitch, TRF_SOLIDACTORS, atkheight, data: trc);
		// record the point that your linetrace hit:
		Vector3 pTargetPos = trc.HitLocation;

		for (int i = 0; i < invoker.projs.Size(); i++) {
			let proj = invoker.projs[i];
			// do nothing if the pointer is invalid, or
			// the projectile still has the RIPPER flag:
			if (!proj || proj.bRIPPER) {
				continue;
			}
			// otherwise...

			// get a vector from projectile's position to target position:
			vector3 diff = LevelLocals.Vec3Diff(proj.pos, pTargetPos);
			// normalize that vector (this converts it into a direction):
			vector3 dir = diff.unit(); 

			// make the projectile fly towards the target point with
			// its speed value:
			proj.vel = proj.speed * dir;
			invoker.PFShotDirected = true;
			invoker.PFCooldown = 0;
			A_Overlay(2, "GunCooldown"); // start 3sec timer
			A_StartSound("weapons/pfkira2"); // play noise
		}

		// clear the array:
		invoker.projs.Clear();
	}
	Default
	{
		Inventory.PickupMessage "Picked up the P.F. Super Shotgun!";
		Obituary "Shouldn't see this.";
		Tag "Perfect Freeze Super Shotgun";
	}
	States
	{
		Ready:
			PFSH A 1 A_WeaponReady;
			Loop;
		Deselect:
			PFSH A 1 A_Lower;
			Loop;
		Select:
			PFSH A 1 A_Raise();
			Loop;
		Fire:
			PFSH A 1 {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				invoker.DepleteAmmo(false); // depletes two shells as if you fired a normal SSG
				for (int i; i < 20; i++) {
/* 4.9+ specific code, not usable yet.
					actor p1; actor p2;
					[p1, p2] = A_FireProjectile("PerfectFreezeBullet", frandom(-7.5, 7.5), useammo: false, pitch: frandom(-3.55, 3.55));
					if (p2) {
						invoker.projs.Push(p2);
					}
*/
					actor p = A_FireProjectile("PerfectFreezeBullet", frandom(-7.5, 7.5), useammo: false, pitch: frandom(-3.55, 3.55));
					if (p) {
						invoker.projs.Push(p);
					}
				}
				A_StartSound("weapons/pfshotf", CHAN_WEAPON);
				A_Overlay(-2, "Flash1");
				A_Overlay(-3, "Flash2");
				A_SpawnItemEx("IceSGFlash");
				A_WeaponOffset(0, 24, WOF_ADD);
				A_OverlayScale(OverlayID(), 1.25, 0, WOF_INTERPOLATE);
				A_OverlayScale(-2, 1.25, 0, WOF_INTERPOLATE);
				A_OverlayScale(-3, 1.25, 0, WOF_INTERPOLATE);
			}
			PFSH A 2;
			PFSH AA 2 {
				A_WeaponOffset(0, -12, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.125, 0, WOF_ADD);
			}
			PFSH A 4;
			PFSH B 7;
			PFSH C 7 A_CheckReload;
			PFSH D 3 A_StartSound("weapons/sshoto", CHAN_WEAPON);
			PFSH EEFG 2;
			PFSH H 3 A_StartSound("weapons/sshotl", CHAN_WEAPON);
			PFSH IJ 2 A_OverlayPivotAlign(OverlayID(), PSPA_LEFT, PSPA_BOTTOM);
			PFSH JJJ 1 {
				A_OverlayOffset(OverlayID(), 5, 10, WOF_ADD);
				A_OverlayRotate(OverlayID(), 5, WOF_ADD);
			}
			PFSH D 3 {
				A_OverlayRotate(OverlayID(), 0);
				A_OverlayOffset(OverlayID(), 0);
			}
			PFSH K 6 {
				A_StartSound("weapons/sshotc", CHAN_WEAPON);
				A_ReFire();
			}
			PFSH A 5 A_ReFire;
			Goto Ready;
		AltFire:
			TNT1 A 0 A_FireFrozenProjectiles;
			Goto Ready;
		Flash1:
			TNT1 A 0 A_OverlayOffset(OverlayID(), 148, 96);
			Goto Flash;
		Flash2:
			TNT1 A 0 A_OverlayOffset(OverlayID(), 168, 96);
			Goto Flash;
		Flash:
			SGFL ABCCDE 1 Bright A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
			Stop;
		Spawn:
			PFSH L -1;
			Stop;
		LightOff:
			PFSH M 1;
			Loop;
		GunCooldown:
			TNT1 A 1 {
				if (invoker.PFCooldown < 3*35 - 1) {
					invoker.PFCooldown++;
					let psp = player.FindPSprite(PSP_Weapon); // check weapon state
					if (psp)
					{
						if (InStateSequence(psp.curstate, ResolveState("Fire")) || InStateSequence(psp.curstate, ResolveState("Select")) || InStateSequence(psp.curstate, ResolveState("Deselect")))
						{
							A_ClearOverlays(3, 3); // does NOT include self
						}
						else {A_Overlay(3, "LightOff");}
					}
					return; // not done yet
				}
				else {
					// okay NOW we're done, destroy the overlays
					invoker.PFShotDirected = false;
					A_StartSound("weapons/pfkira1");
					A_ClearOverlays(2, 3); // includes self
				}
			}
			Loop;
	}
}

class PerfectFreezeBullet : Actor
{
	action State PerfectFreezeTimerJump()
	{
		if (GetAge() == 3*35) {
			A_StartSound("weapons/pfkira0");
			A_Stop();
			return ResolveState("White");
		}
		if (GetAge() >= 13*35) {A_FadeOut();}
		return State(null);
	}
	Default
	{
//		Scale 0.5;
		Radius 6;
		Height 8;
		Speed 20;
		Damage 3;
		Projectile;
		+RIPPER
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOGRAVITY
		BounceType "Doom";
		DeathSound "weapons/pfgraze";
		RipSound "weapons/pfdamage";
	}
	States
	{
		Spawn:
			PFBU F 1 Bright A_Jump(256, "Red", "Blue", "Green", "Yellow", "Orange");
			Loop;
		Red:
			PFBU A 1 Bright PerfectFreezeTimerJump;
			Loop;
		Blue:
			PFBU B 1 Bright PerfectFreezeTimerJump;
			Loop;
		Green:
			PFBU C 1 Bright PerfectFreezeTimerJump;
			Loop;
		Yellow:
			PFBU D 1 Bright PerfectFreezeTimerJump;
			Loop;
		Orange:
			PFBU E 1 Bright PerfectFreezeTimerJump;
			Loop;
		White:
			PFBU F 1 Bright {
				bRIPPER = false;
				bBOUNCEONWALLS = false;
				bBOUNCEONFLOORS = false;
				bBOUNCEONCEILINGS = false;
				bBOUNCEAUTOOFFFLOORONLY = false;
				PerfectFreezeTimerJump();
			}
			Loop;
		Death:
			PFBU F 1 Bright A_FadeOut(0.1);
			Loop;
	}
}