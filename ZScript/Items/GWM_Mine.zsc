class GWM_Mine : CustomInventory
{
	Default
	{
		//$Category Items
		//$Title "Land Mine
		Tag "$TAG_MINE";
		Inventory.PickupMessage "$GOTMINES";
		Inventory.MaxAmount 50;
		Inventory.Amount 1;
		Inventory.Icon "MINWA0";
		+INVENTORY.INVBAR;
	}
	States
	{
		Spawn:
			MINW A -1;
			Stop;
		Use:
			TNT1 A 0 A_FireProjectile("GWM_ThrownMine");
			Stop;
	}
}
class GWM_ThrownMine : Actor // Okay, so like, I was going to do this myself, but then I saw there was a better mine on the wiki, so fuck it
{
	override bool Used(Actor user)
	{
		// add a sound
		SetState(ResolveState("Disarm"));
		return true;
	}
	// This will the mine's activation radius:
	const DETECTRADIUS = 80;
	Default
	{
		//$Category Obstacles
		//$Title "Planted Land Mine
		Tag "$TAG_MINE";
		Radius 20;
		Height 10;
		Health 1;
		Speed 24;
		Obituary "$KILLMINES";
		DamageType "Rocket";
		BounceType "Hexen";
		DeathSound "weapons/explode";
		BounceSound "weapons/grndimp";
		Projectile;
		+USEBOUNCESTATE +NOBLOOD +SHOOTABLE -NOGRAVITY -NOBLOCKMAP +CANBOUNCEWATER
	}
	States
	{
		Spawn:
			MINW B 2 A_SetAngle(angle+45);
			Loop;
		Bounce:
			MINW B 1 A_SetAngle(angle+45);
			Loop;
		Bounce.Floor:
			MINW B 0 {
				self.Vel.X = 0;
				self.Vel.Y = 0;
				self.Vel.Z = 0;
				bBOUNCEONFLOORS = false;
				bBOUNCEONWALLS = false;
				bBOUNCEONCEILINGS = false;
				bBOUNCEONACTORS = false;
				bMOVEWITHSECTOR = true;
			}
		Ground:
			MINW B 1
			{
				// Create an iterator to cover the effective radius:
				BlockThingsIterator it = BlockThingsIterator.Create(self, DETECTRADIUS);
				while (it.Next())
				{
					// Get a shorter pointer to the found actor (for convenience):
					let obj = it.thing;
					
					// Check the object is either a monster or a player, isn't the same
					// as the projectile's target (so that the shooter can't trigger it),
					// then checks that it's alive and within distance:
					if ((obj.bISMONSTER || obj.player) && (!target || obj != target) && obj.health > 0 && Distance3D(obj) <= DETECTRADIUS)
					{
						// Go to the Boom state sequence if the check passes:
						return ResolveState("Detected");
					}
				}
				
				// Once a second it'll play a DSTINK sound to emulate beeping:
				if (GetAge() % 35 == 0)
				{
					A_StartSound("weapons/minewait", volume: 0.8, attenuation: 5);
				}
				
				// If the jump didn't happen, proceed to loop:
				return ResolveState(null);
			}
			Loop;
		Detected:
			// Make the mine jump up as a visual cue,
			// then proceed to the explosion sequence:
			MINW B 2 {vel.z += 8; A_StartSound("weapons/minedet");}
			MINW BBB 2 A_StartSound("weapons/minedet");
		Bounce.Actor:
		Death:
			XFIR A 1 Bright A_SetRenderstyle(alpha, STYLE_Add); // so it won't explode in timestop
			TNT1 A 0 {
				bSPECIAL = false;
				bMISSILE = true;
				bNOGRAVITY = true;
				self.Vel.X = 0;
				self.Vel.Y = 0;
				self.Vel.Z = 0;
				A_Scream();
				A_Explode();
			}
			TNT1 A 1 A_SpawnItemEX("ShakeItBaby",0,0,5);
			TNT1 AAA 1 {
				A_SpawnItemEX("BlastFlameFX2",frandom(-15,15),frandom(-15,15),frandom(2,45),frandom(-6,6),frandom(-6,6),frandom(-6,6),frandom(1,359));
				A_SpawnItemEX("BlastFlameFX",frandom(-15,15),frandom(-15,15),frandom(2,45),frandom(-10,10),frandom(-10,10),frandom(-10,10),frandom(1,359));
				A_SpawnItemEX("BlastFlameFX",frandom(-15,15),frandom(-15,15),frandom(2,45),frandom(-10,10),frandom(-10,10),frandom(-10,10),frandom(1,359));
				A_SpawnItemEX("BlastFlameFX",frandom(-15,15),frandom(-15,15),frandom(2,45),frandom(-10,10),frandom(-10,10),frandom(-10,10),frandom(1,359));
				A_SpawnItemEX("BlastFlameFX",frandom(-15,15),frandom(-15,15),frandom(2,45),frandom(-10,10),frandom(-10,10),frandom(-10,10),frandom(1,359));
			}
			Stop;
		Disarm:
			TNT1 A 0 A_SpawnItemEx("GWM_Mine");
			Stop;
	}
}