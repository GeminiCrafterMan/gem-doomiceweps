class GWM_Speedupgrades : Inventory { Default {Inventory.Maxamount 50000;}}
class GWM_HPupgrade : MaxHealth { Default {Inventory.Maxamount 9900;}}

class GWM_Player : DoomPlayer
{
	int prevPlayerState;
	int FireBurnDelay;
	int AcidWeakDelay;
	//self.Player.ReadyWeapon;
	int ChargedRockets;
		int ChargedRocketDelay;
	int ChargedGrenadeDelay;
		int ChargedGrenades;
	int ShotgunSpreadDelay;
	int PandoraChargeDelay;
	bool PW_FiringGrenade;
	
	
	override void Tick()
	{
		super.Tick();
		if(!player || !player.ReadyWeapon) return;
		if (CVar.GetCVar('gwm_shutupmerc', player).GetBool() == false) 
		{
			if (player && prevPlayerState != player.playerstate)
			{
				if (prevPlayerState == PST_DEAD && player.playerstate == PST_LIVE)	// for singleplayer resurrects
				{
					A_StartSound("player/respawn", CHAN_VOICE);
				}
				prevPlayerState = player.playerstate;
			}
		}
		if(player.playerstate == PST_DEAD)
		{
			player.ReadyWeapon.FOVScale = 0.0;
		}
		else if(player.cmd.buttons & BT_ZOOM)
		{
			player.ReadyWeapon.FOVScale = 0.5;
		}
		else
		{
			player.ReadyWeapon.FOVScale = 0.0;
		}
		
	
		if(self.CountInv("FireBurnCount") && self.FireBurnDelay > 15)
		{ 
		A_DamageSelf(1,"Fire");
		self.FireBurnDelay = 0;
		TakeInventory("FireBurnCount",4);
		}
		
		self.FireBurnDelay = self.FireBurnDelay + 1;
		
		if(self.CountInv("AcidWeakCount") && self.AcidWeakDelay > 5)
		{ 
		A_TakeInventory("AcidWeakCount",1);
		A_GiveInventory("PowerAcidWeakness");
		self.AcidWeakDelay = 0;
		}
		
		self.AcidWeakDelay = self.AcidWeakDelay + 1;
		
		self.speed = 1 + (0.2*self.CountInv("GWM_Speedupgrades")) - (0.004 *self.CountInv("IceSlowCount"));	
		TakeInventory("IceSlowCount",1);
		
	// G: WHY DID ADDING self. IN FRONT OF EACH ChargedRocketDelay FIX IT???
	// M: Zscript bullshit strikes again!!!
		
		//Lower Rockets and reset delay when firing.
		if(self.CountInv("GWM_FiringRocket") > 0)
		{
			self.ChargedRocketDelay = 0;
			if(self.ChargedRockets > 0)
			{--self.ChargedRockets;}
			Takeinventory("GWM_FiringRocket",5);
		}
		
		if(self.CountInv("GWM_AltFiringRocket") > 0)
		{
			self.ChargedRocketDelay = 0;
			if(self.ChargedRockets > 0)
			{
			--self.ChargedRockets;
			--self.ChargedRockets;
			}
			Takeinventory("GWM_AltFiringRocket",5);
		}
		
		if (self.ChargedRocketDelay > 1050)
		{ 
			self.ChargedRocketDelay = 0;
			if (self.ChargedRockets < 4)
				{++ self.ChargedRockets;}
		}
		if (self.player.ReadyWeapon.GetClassName() == "GWM_RocketLauncher")
			self.ChargedRocketDelay += 2;
		else
			self.ChargedRocketDelay += 3;

		if(self.PW_FiringGrenade)
		{
			self.ChargedRocketDelay = 0;
			self.ChargedGrenades = 0;
			PW_FiringGrenade = false;
		}
		
		if (self.ChargedGrenadeDelay > 780)
		{ 
			self.ChargedGrenadeDelay = 0;
			if (self.ChargedGrenades < 6)
				{++ self.ChargedGrenades;}
		}
		if (self.player.ReadyWeapon.GetClassName() == "GWM_GrenadeLauncher")
			self.ChargedGrenadeDelay += 3;
		else
			self.ChargedGrenadeDelay += 4;

		setInventory("GWM_ChargedGrenades",self.chargedGrenades);

		if (self.ShotgunSpreadDelay > 36)
		{ 
			self.ShotgunSpreadDelay = 0;
			A_TakeInventory("GWM_KahunaSpread",1);
		}
		if (self.player.ReadyWeapon.GetClassName() == "GWM_SlayersKahuna")
			self.ShotgunSpreadDelay += 1;
		else
			self.ShotgunSpreadDelay += 3;
	}
	Default
	{
		Player.DisplayName "Mercenary";
		Player.SoundClass "GWM_Player";
		Player.WeaponSlot 1, "GWM_Fist", "GWM_Lumberjack";
		Player.WeaponSlot 2, "GWM_Pistol";
		Player.WeaponSlot 3, "GWM_SlayersKahuna", "GWM_SuperShotgun";
		Player.WeaponSlot 4, "GWM_MadVulcan";
		Player.WeaponSlot 5, "GWM_RocketLauncher";
		Player.WeaponSlot 6, "GWM_PlasmaRifle";
		Player.WeaponSlot 7, "GWM_BFG9000";
		
		Player.StartItem "GWM_PandoraPointsCap", 250;
		
		
	}
}
class GWM_DoomPlayer : GWM_Player
{
	Default
	{
		Player.StartItem "GWM_IsPlayer";
		Player.StartItem "GWM_Pistol";
		Player.StartItem "GWM_Fist";
		Player.StartItem "GWM_Mine";
		Player.StartItem "GWM_Dynamite";
		Player.StartItem "GWM_HollowPointMagazine", 50;
		Player.StartItem "GWM_QuickKickController";
		Player.StartItem "GWM_PandoraPointsCap", 250;
		
	}
}
class GWM_HereticPlayer : GWM_Player
{
	Default
	{
		Player.StartItem "GWM_IsPlayer";
		Player.StartItem "GWM_GoldWand";
		Player.StartItem "GWM_Fist";
		Player.StartItem "GWM_WandCrystal", 50;
		Player.StartItem "GWM_QuickKickController";
		Player.StartItem "GWM_PandoraPointsCap", 250;
		
		Player.ColorRange 224, 209;
	}
}


class GWM_QuickKickController : CustomInventory
{
	const KICKLAYER = -100;
	override void DoEffect()
	{
		super.DoEffect();
		if (!owner || !owner.player)
		{
			return;
		}
		let psp = owner.player.FindPSprite(KICKLAYER );
		if (!psp)
		{
			psp = owner.player.GetPSprite(KICKLAYER );
			psp.caller = self;
			psp.bAddBob = false;
			psp.bAddWeapon = false;
			psp.SetState(ResolveState("ReadyKick"));
		}
	}
	Default
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.AUTOACTIVATE //Use is called automatically
		Obituary "$KILLKICK";
	}
	States 
	{
		Use:
			TNT1 A 0 
			{
				// We're passing 'true' to the last argument, so
				// that the layer doesn't get overridden if for
				// some reason the item is used again:
				A_Overlay(KICKLAYER, "ReadyKick", true);
			}
			fail;
		ReadyKick:
			TNT1 A 1
			{
//				Console.Printf("Did effect");
				// Check if +user2 is pressed:
				if (!player.PlayerState == PST_DEAD && player.cmd.buttons & BT_USER2)
				{
					// move to DoKick if so:
					return ResolveState("DoKick");
				}
				// Otherwise loop this layer
				return ResolveState(null);
			}
			loop;
		DoKick:
			TNT1 A 0 A_OverlayOffset(OverlayID(), -20, WEAPONTOP);
			KICK AB 2;
			KICK CD 1;
			KICK E 3 {
				// redo this shit later
				int dmg = 11;
				if (FindInventory("GWM_PowerStrength"))
				{
					A_CustomPunch(dmg*10, norandom:true, flags: 0, pufftype: "GWM_BerserkPuff", range: meleeRange + 20, meleesound: "*fist");
				}
				else
				{
					A_CustomPunch(dmg, norandom:true, flags: 0, pufftype: "GWM_KickPuff", range: meleeRange + 20, meleesound: "*fist");
				}
			}
			KICK DCB 3;
			KICK A 3
			{
				if (player.cmd.buttons & BT_USER2 && player.oldbuttons & BT_USER2)
				{
					return ResolveState("DoKick");
				}
				return ResolveState(null);
			}
			goto ReadyKick; //Note that we go back to ready from here
	}
}
class GWM_KickPuff : GWM_FistPuff
{
	Default
	{
		DamageType "Kick";
	}
}

class GWM_HellKnightPlayer : PlayerPawn
{
	Default
	{
		Health 500;
		ReactionTime 0;
		PainChance 255;
		Radius 24;
		Height 64;
		Speed 0.88;
		Gravity 1.5;
		Mass 1000;
		+NOSKIN
		PainSound "knight/pain";
		DeathSound "knight/death";
		Player.JumpZ 8;
		Player.ViewHeight 60;
		Player.SoundClass "GWM_HKPlayer";
		Player.DisplayName "Hell Knight";
		Player.Face "HKN";
		Player.MorphWeapon "GWM_HellKnightClaws";
	}
	States
	{
		Spawn:
			HKNI A -1;
			Stop;
		See:
			HKNI ABCD 6;
			Loop;
		Melee:
		Missile:
			HKNI EFG 8;
			Goto Spawn;
		Pain:
			HKNI H 2;
			HKNI H 2 A_Pain;
			Goto Spawn;
		Death:
			HKNI I 8;
			HKNI J 8 A_Scream;
			HKNI K 8;
			HKNI L 8 A_NoBlocking;
			HKNI MN 8;
			HKNI O -1;
			Stop;
	}
}

Class GWM_IsPlayer : Inventory {}