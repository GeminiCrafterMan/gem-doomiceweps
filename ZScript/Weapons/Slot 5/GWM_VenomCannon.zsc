class GWM_VenomCannon : GWM_WeaponBase // desperately in need of a nerf
{
	Default
	{
		//$Category Weapons
		//$Title "Acid Cannon"
		Weapon.SelectionOrder 600; // Actually really good!! Kills shit really well, with no self-damage.
		Weapon.UpSound "weapons/draw_primary";
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "GWM_VenomVial";
		Weapon.AmmoType2 "GWM_VenomVial";
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "$GOTVENOMCANNON";
		Tag "$TAG_VENOMCANNON";
	}
	States
	{
		Ready:
			VNMG A 1 A_WeaponReady;
			Loop;
		Deselect:
			VNMG A 1 A_Lower(18);
			Loop;
		Select:
			VNMG A 1 A_Raise(18);
			Loop;
		Fire:
			VNMG B 4 A_Overlay(-2, "Flash");
			VNMG C 6 {
				A_Overlay(-2, "Flash");
				A_StartSound("weapons/vnmcfire", CHAN_WEAPON);
				A_FireProjectile("GWM_AcidBall", 0, true, 0, 0, 0);
			}
			VNMG BA 4;
			TNT1 A 0 A_ReFire;
			Goto Ready;
		//AltFire:
			VNMG C 6 {
				A_Overlay(-2, "Flash");
				A_StartSound("weapons/vnmcfire", CHAN_WEAPON);
				A_FireProjectile("GWM_SmallVenomBall_Shotgun", 0, true, 0, 10);
				A_FireProjectile("GWM_SmallVenomBall_Shotgun", 5, false, 0, 0);
				A_FireProjectile("GWM_SmallVenomBall_Shotgun", 0, false, 0, 0);
				A_FireProjectile("GWM_SmallVenomBall_Shotgun", -5, false, 0, 0);
				A_FireProjectile("GWM_SmallVenomBall_Shotgun", 0, false, 0, -10);
			}
			VNMG BA 4;
			TNT1 A 0 A_ReFire;
			Goto Ready;
		Flash:
			VNMF ABCDE 2;
			Stop;
		Spawn:
			VNMG Z -1;
			Stop;
	}
}
class GWM_VenomBall : Actor
{

	override int SpecialMissileHit(actor victim) //decides how to spawn the ice thinker
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_Die("Acid");
				return 1;
			}
			
			if (victim.CountInv("AcidWeakCount")== 0)
			{
				victim.A_SpawnProjectile("GWM_AcidStatusThinker");
			}
			A_StartSound("Status/IceHit");
			
			victim.A_GiveInventory("AcidWeakCount",50);
				
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	
	actor victim;

	Default
	{
		Speed 20;
		DamageFunction (80);
		Height 24;
		Radius 24;
		BounceCount 11;
		Scale 0.25;
		Gravity 0.33;
		-NOGRAVITY
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEAUTOOFF
		+USEBOUNCESTATE
		+FORCEXYBILLBOARD
		+RANDOMIZE
		+THRUGHOST
		Projectile;
		BounceSound "weapons/vnmcsplt";
		DeathSound "weapons/vnmcbomb";
		Obituary "$KILLVENOMCANNONBALL";
		-NoGravity;
	}
	States
	{
		Spawn:
			VNMP A 6 A_SetScale(0.25, 0.25);
			VNMP A 2 A_SetScale(0.25, 0.24);
			VNMP A 2 A_SetScale(0.25, 0.23);
			VNMP A 2 A_SetScale(0.25, 0.22);
			VNMP A 2 A_SetScale(0.25, 0.21);
			VNMP A 2 A_SetScale(0.25, 0.20);
			VNMP A 2 A_SetScale(0.25, 0.21);
			VNMP A 2 A_SetScale(0.25, 0.22);
			VNMP A 2 A_SetScale(0.25, 0.23);
			VNMP A 2 A_SetScale(0.25, 0.24);
			VNMP A 6 A_SetScale(0.25, 0.25);
			VNMP A 2 A_SetScale(0.24, 0.25);
			VNMP A 2 A_SetScale(0.23, 0.25);
			VNMP A 2 A_SetScale(0.22, 0.25);
			VNMP A 2 A_SetScale(0.21, 0.25);
			VNMP A 2 A_SetScale(0.20, 0.25);
			VNMP A 2 A_SetScale(0.21, 0.25);
			VNMP A 2 A_SetScale(0.22, 0.25);
			VNMP A 2 A_SetScale(0.23, 0.25);
			VNMP A 2 A_SetScale(0.24, 0.25);
			Loop;
		Bounce.Ceiling:
			TNT1 A 0 A_SpawnItemEx("GWM_SmallVenomBall");
			Goto Bounce.Vertical;
		Bounce.Floor:
			TNT1 A 0 A_SpawnItemEx("GWM_FloorVenomPuddle");
		Bounce.Vertical:
			VNMP A 1 A_SetScale(0.25, 0.1875);
			VNMP A 1 A_SetScale(0.25, 0.125);
			VNMP A 1 A_SetScale(0.25, 0.1875);
			VNMP A 1 A_SetScale(0.25, 0.25);
			Goto Spawn;
		Bounce.Wall:
			TNT1 A 0 A_JumpIf(random(0, 1), "Bounce.Vertical");	// Randomly jumps to the floor bounce version, for variation.
			VNMP A 1 A_SetScale(0.1875, 0.25);
			VNMP A 1 A_SetScale(0.125, 0.25);
			VNMP A 1 A_SetScale(0.1875, 0.25);
			VNMP A 1 A_SetScale(0.25, 0.25);
			Goto Spawn;
		Death:
			TNT1 A 0 {
				A_Scream();
				A_SetScale(0.25, 0.25);
				A_SpawnItemEx("GWM_SmallVenomBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_SmallVenomBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_SmallVenomBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_SmallVenomBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_SmallVenomBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_FloorVenomPuddle");
			}
			VNMP BCDEF 1;
			Stop;
	}
}
class GWM_SmallVenomBall : GWM_VenomBall
{
	Default
	{
		Speed 0;
		DamageFunction (16);
		Height 12;
		Radius 12;
		Scale 0.125;
		Gravity 0.66;
	}
	States
	{
		Spawn:
			VNMP A 6 A_SetScale(0.125, 0.125);
			VNMP A 2 A_SetScale(0.125, 0.124);
			VNMP A 2 A_SetScale(0.125, 0.123);
			VNMP A 2 A_SetScale(0.125, 0.122);
			VNMP A 2 A_SetScale(0.125, 0.121);
			VNMP A 2 A_SetScale(0.125, 0.120);
			VNMP A 2 A_SetScale(0.125, 0.121);
			VNMP A 2 A_SetScale(0.125, 0.122);
			VNMP A 2 A_SetScale(0.125, 0.123);
			VNMP A 2 A_SetScale(0.125, 0.124);
			VNMP A 6 A_SetScale(0.125, 0.125);
			VNMP A 2 A_SetScale(0.124, 0.125);
			VNMP A 2 A_SetScale(0.123, 0.125);
			VNMP A 2 A_SetScale(0.122, 0.125);
			VNMP A 2 A_SetScale(0.121, 0.125);
			VNMP A 2 A_SetScale(0.120, 0.125);
			VNMP A 2 A_SetScale(0.121, 0.125);
			VNMP A 2 A_SetScale(0.122, 0.125);
			VNMP A 2 A_SetScale(0.123, 0.125);
			VNMP A 2 A_SetScale(0.124, 0.125);
			Loop;
		Bounce.Floor:
			TNT1 A 0 A_SpawnItemEx("GWM_FloorVenomPuddle");
			Goto Death;
		Bounce.Wall:
			TNT1 A 0 A_JumpIf(random(0, 1), "Bounce.Ceiling");	// Randomly jumps to the floor bounce version, for variation.
			VNMP A 1 A_SetScale(0.09375,0.125);
			VNMP A 1 A_SetScale(0.0625,0.125);
			VNMP A 1 A_SetScale(0.09375,0.125);
			VNMP A 1 A_SetScale(0.125,0.125);
			Goto Spawn;
		Bounce.Ceiling:
			VNMP A 1 A_SetScale(0.125,0.09375);
			VNMP A 1 A_SetScale(0.125,0.0625);
			VNMP A 1 A_SetScale(0.125,0.09375);
			VNMP A 1 A_SetScale(0.125,0.125);
			Goto Spawn;
		Death:
			TNT1 A 0 {
				A_Scream();
				A_SetScale(0.125, 0.125);
			}
			VNMP BCDEF 1;
			Stop;
	}
}
class GWM_SmallVenomBall_Shotgun : GWM_SmallVenomBall {Default {Speed 20;}}
class GWM_FloorVenomPuddle : Actor
{
	Default
	{
		Height 2;
		Projectile;
		Radius 16;
		-NOGRAVITY
		+NOTELEPORT
		+FLATSPRITE
		+FLOORHUGGER
		+MOVEWITHSECTOR
		DamageFunction (1);
		Obituary "$KILLVENOMCANNONPUDDLE";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_JumpIf(random(0, 1), "Puddle3");
			TNT1 A 0 A_JumpIf(random(0, 1), "Puddle2");
		Puddle1:
			VNMP G 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
		Puddle2:
			VNMP H 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
		Puddle3:
			VNMP I 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
	}
}

class GWM_AcidBall : Actor
{

	override int SpecialMissileHit(actor victim) //decides how to spawn the ice thinker
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_Die("Acid");
				return 1;
			}
			
			if (victim.CountInv("AcidWeakCount")== 0)
			{
				victim.A_SpawnProjectile("GWM_AcidStatusThinker");
			}
			A_StartSound("Status/IceHit");
			
			victim.A_GiveInventory("AcidWeakCount",150);
				
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	
	actor victim;

	Default
	{
		Speed 20;
		DamageFunction (20);
		Height 24;
		Radius 24;
		BounceCount 11;
		Scale 0.45;
		Gravity 0.43;
		-NOGRAVITY
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+BOUNCEAUTOOFF
		+USEBOUNCESTATE
		+FORCEXYBILLBOARD
		+RANDOMIZE
		+THRUGHOST
		Projectile;
		BounceSound "weapons/vnmcsplt";
		DeathSound "weapons/vnmcbomb";
		Obituary "$KILLVENOMCANNONBALL";
		-NoGravity;
	}
	States
	{
		Spawn:
			VNMP A 2 A_SpawnItemEX("GWM_AcidSplashFX",0,0,12,frandom(-2,2),frandom(-2,2),frandom(-2,1));
			Loop;
		Bounce.Ceiling:
				
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-5,5),frandom(-5,5),frandom(-4,-2), random(1,360));
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("GWM_SmallAcidBall", 0,0,5, frandom(-5,5),frandom(-5,5),frandom(-4,-2), random(1,360));
			stop;	
		Bounce.Floor:
			TNT1 A 0 A_SpawnItemEx("GWM_FloorAcidPuddle");
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-5,5),frandom(-5,5),frandom(5,8), random(1,360));
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("GWM_SmallAcidBall", 0,0,5, frandom(-5,5),frandom(-5,5),frandom(5,8), random(1,360));
			stop;	
		Bounce.Wall:
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-8,-3),frandom(-5,5),frandom(5,8), random(1,360));
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("GWM_SmallAcidBall", 0,0,5, frandom(-8,-3),frandom(-5,5),frandom(5,8), random(1,360));
			stop;
		Death:
			TNT1 A 0 {
				A_Scream();
				A_SetScale(0.25, 0.25);
				A_SpawnItemEx("GWM_SmallAcidBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_SmallAcidBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_SmallAcidBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_SmallAcidBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_SmallAcidBall", xvel: 5, zvel: 10, angle: random(1,360));
				A_SpawnItemEx("GWM_FloorAcidPuddle");
			}
			VNMP BCDEF 1;
			Stop;
			
	}
}



class GWM_FloorAcidPuddle : Actor
{

	override int SpecialMissileHit(actor victim) //decides how to spawn the ice thinker
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_Die("Acid");
				return 1;
			}
			
			if (victim.CountInv("AcidWeakCount")== 0)
			{
				victim.A_SpawnProjectile("GWM_AcidStatusThinker");
			}
			A_StartSound("Status/IceHit");
			
			victim.A_GiveInventory("AcidWeakCount",80);
				
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	
	actor victim;


	Default
	{
		Height 2;
		Projectile;
		Radius 16;
		-NOGRAVITY
		+NOTELEPORT
		+FLATSPRITE
		+FLOORHUGGER
		+MOVEWITHSECTOR
		Scale 2;
		DamageFunction (1);
		Obituary "$KILLVENOMCANNONPUDDLE";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_JumpIf(random(0, 1), "Puddle3");
			TNT1 A 0 A_JumpIf(random(0, 1), "Puddle2");
		Puddle1:
			VNMP G 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
		Puddle2:
			VNMP H 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
		Puddle3:
			VNMP I 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
	}
}


class GWM_SmallAcidBall : Actor
{

	override int SpecialMissileHit(actor victim) //decides how to spawn the ice thinker
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_Die("Acid");
				return 1;
			}
			
			if (victim.CountInv("AcidWeakCount")== 0)
			{
				victim.A_SpawnProjectile("GWM_AcidStatusThinker");
			}
			A_StartSound("Status/IceHit");
			
			victim.A_GiveInventory("AcidWeakCount",50);
				
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	
	actor victim;

	Default
	{
		Speed 20;
		DamageFunction (5);
		Height 24;
		Radius 24;
		Scale 0.15;
		Gravity 0.43;
		-NOGRAVITY
		+FORCEXYBILLBOARD
		+RANDOMIZE
		+THRUGHOST
		Projectile;
		BounceSound "weapons/vnmcsplt";
		DeathSound "weapons/vnmcbomb";
		Obituary "$KILLVENOMCANNONBALL";
		-NoGravity;
	}
	States
	{
		Spawn:
			VNMP A 8 A_SpawnItemEX("GWM_SmallAcidSplashFX",0,0,12,frandom(-2,2),frandom(-2,2),frandom(-2,1));
			Loop;
		Death:
			TNT1 A 0 {
				A_Scream();
				A_SetScale(0.25, 0.25);
				A_SpawnItemEx("GWM_MicroAcidBall", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_MicroAcidBall", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_MicroAcidBall", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_MicroAcidBall", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_MicroAcidBall", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
				A_SpawnItemEx("GWM_SmallFloorAcidPuddle");
			}
			VNMP BCDEF 1;
			Stop;
	}
}

class GWM_SmallFloorAcidPuddle : Actor
{

	override int SpecialMissileHit(actor victim) //decides how to spawn the ice thinker
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_Die("Acid");
				return 1;
			}
			
			if (victim.CountInv("AcidWeakCount")== 0)
			{
				victim.A_SpawnProjectile("GWM_AcidStatusThinker");
			}
			A_StartSound("Status/IceHit");
			
			victim.A_GiveInventory("AcidWeakCount",50);
				
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	
	actor victim;


	Default
	{
		Height 2;
		Projectile;
		Radius 16;
		-NOGRAVITY
		+NOTELEPORT
		+FLATSPRITE
		+FLOORHUGGER
		+MOVEWITHSECTOR
		DamageFunction (1);
		Obituary "$KILLVENOMCANNONPUDDLE";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_JumpIf(random(0, 1), "Puddle3");
			TNT1 A 0 A_JumpIf(random(0, 1), "Puddle2");
		Puddle1:
			VNMP G 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
		Puddle2:
			VNMP H 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
		Puddle3:
			VNMP I 1 {self.Vel.X = 0; self.Vel.Y = 0;}
			Loop;
	}
}

class GWM_MicroAcidBall : Actor
{
	Default
	{
		Speed 20;
		DamageFunction (1);
		Height 24;
		Radius 24;
		Scale 0.075;
		Gravity 0.43;
		-NOGRAVITY
		+FORCEXYBILLBOARD
		+RANDOMIZE
		+THRUGHOST
		Projectile;
		BounceSound "weapons/vnmcsplt";
		DeathSound "weapons/vnmcbomb";
		Obituary "$KILLVENOMCANNONBALL";
		-NoGravity;
	}
	States
	{
		Spawn:
			VNMP A 6;
			Loop;
		Death:
			TNT1 A 0 {
				A_Scream();
			}
			TNT1 A 0 A_SpawnItemEx("GWM_AcidSplashFX", 0,0,5, frandom(-3,-3),frandom(-3,3),frandom(1,4), random(1,360));
			Stop;
	}
}

class GWM_AcidSplashFX : Actor
{
	Default
	{
		Scale 0.21;
		Gravity 0.43;
		Alpha 0.75;
	}
	States
	{
		Spawn:
			ACED ABCDEFGHI 2 bright;
			Stop;
	}
}

class GWM_SmallAcidSplashFX : Actor
{
	Default
	{
		Scale 0.095;
		Gravity 0.43;
		Alpha 0.75;
	}
	States
	{
		Spawn:
			ACED ABCDEFGHI 2 bright;
			Stop;
	}
}