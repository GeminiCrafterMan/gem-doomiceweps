
class GWM_Stomper : GWM_WeaponBase
{
	Default
	{
		//$Category Weapons
		Tag "$TAG_STOMPER";
		Weapon.SlotNumber 5;
		-WEAPON.NOAUTOFIRE;
		Weapon.SelectionOrder 50;
		Weapon.AmmoType "GWM_StomperAmmo";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Inventory.PickupMessage "$GOTSTOMPER";
		Inventory.PickupSound "stomper/pickup";
		Weapon.UpSound "stomper/pickup";
		Weapon.KickBack 50;
	}
	States
	{
		Spawn:
			CRSH Z -1;
			Stop;
		Select:
			CRSH A 1 A_Raise(18);
			Loop;
		Deselect:
			CRSH A 1 A_Lower(18);
			Loop;
		Ready:
			CRSH A 1 A_WeaponReady;
			Loop;
		NoAmmo:
			CRSH A 2 A_PlaySound("weapons/empty");
			Goto Ready;
		Fire:
			CRSH B 1 Bright {
				A_Light1();
				A_PlaySound("stomper/fire", CHAN_WEAPON);
				A_SetPitch(pitch - 1.6);
				A_FireProjectile("GWM_StomperMissile1"); // angle = 0, useammo = true are both implied
			}
			CRSH C 1 Bright {
				Radius_Quake(3, 4, 0, 1, 0);
				A_SetPitch(pitch + 0.8);
				A_Light2();
				A_FireProjectile("GWM_StomperMissile2", -3.25, useammo: false, pitch: frandom(-2.0, 2.0));
				A_FireProjectile("GWM_StomperMissile2", 3.25, useammo: false, pitch: frandom(-1.0, 1.0));
			}
			CRSH C 1 Bright {
				A_SetPitch(pitch + 0.8);
				A_FireProjectile("GWM_StomperMissile3", -5.5, useammo: false, pitch: frandom(-2.0, 2.0));
			}
			CRSH D 2 Bright {
				A_Light0();
				A_FireProjectile("GWM_StomperMissile3", 5.5, useammo: false, pitch: frandom(-1.0, 1.0));
			}
			CRSH E 2 Bright;
			CRSH FGG 1;
			CRSH A 14;
			CRSH A 1 A_Refire;
			Goto Ready;
	}
}

// player-fired rockets
class GWM_StomperMissile1 : Actor
{
	int loopsRemaining;

	Default
	{
		Radius 3;
		Height 6;
		Projectile;
		DamageFunction (20);
		Speed 28;
		DamageType "Rocket";
		+DEHEXPLOSION
		Obituary "$KILLSTOMPER";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay {invoker.loopsRemaining = 10;}
			Goto SpawnLoop;
		SpawnLoop:
			TNT1 A 0 A_Weave(2, 2, frandom(-3, 3), frandom(-3, 3));
			CRMS A 2 Bright A_SpawnItemEx("GWM_StomperMissileTrail", 0, 0, 0, 0, frandom(0, -0.25), frandom(-0.25, 0.25));
			TNT1 A 0 {invoker.loopsRemaining -= 1;}
			TNT1 A 0 A_JumpIf(invoker.loopsRemaining == 0, "Death");
			Loop;
		Death:
			TNT1 A 0 A_Stop;
			TNT1 A 7 A_SpawnItemEx("GWM_StomperMissileExplosion", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS);
			TNT1 A 7 A_SpawnItemEx("GWM_StomperMissileExplosion", 0, frandom(-12.0, 12.0), frandom(-12.0, 12.0), 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS);
			TNT1 A 7 A_SpawnItemEx("GWM_StomperMissileExplosion", 0, frandom(-12.0, 12.0), frandom(-12.0, 12.0), 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS);
			TNT1 A 7 A_SpawnItemEx("GWM_StomperMissileExplosion", 0, frandom(-12.0, 12.0), frandom(-12.0, 12.0), 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERPOINTERS);
			Stop;
	}
}
class GWM_StomperMissile2 : GWM_StomperMissile1
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay {invoker.loopsRemaining = 9;}
			Goto Super::SpawnLoop;
	}
}
class GWM_StomperMissile3 : GWM_StomperMissile1
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay {invoker.loopsRemaining = 8;}
			Goto Super::SpawnLoop;
	}
}

class GWM_StomperMissileExplosion : Actor
{
	Default
	{
		Radius 8;
		Height 16;
		Speed 0;
		+NOGRAVITY
		Projectile;
		DamageType "Rocket";
		Obituary "$KILLSTOMPER";
		SeeSound "";
		DeathSound "";
	}
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_Jump(160, "SkipSound");
			TNT1 A 0 A_PlaySound("Stomper/explode", CHAN_5);
		SkipSound:
			TNT1 A 0 Radius_Quake(2, 1, 0, 1, 0);
			TNT1 A 0 A_Jump(256, "Explode1", "Explode2", "Explode3");
		Explode1:
			CME1 ABC 2 Bright A_Explode(5, 56, XF_HURTSOURCE, false, 32);
			CME1 DEF 2 Bright;
			Stop;
		Explode2:
			CME2 ABC 2 Bright A_Explode(5, 56, XF_HURTSOURCE, false, 32);
			CME2 DE 2 Bright;
			Stop;
		Explode3:
			CME3 ABC 2 Bright A_Explode(5, 56, XF_HURTSOURCE, false, 32);
			CME3 DEF 2 Bright;
			Stop;
	}
}

class GWM_StomperMissileTrail : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Alpha 0.6;
		Scale 0.5;
		+NOINTERACTION
		+CLIENTSIDEONLY
		+RANDOMIZE
	}
    States
    {
		Spawn:
			TNT1 A 1;
			SMXP ABCDE 2 Bright;
			Stop;
    }
}