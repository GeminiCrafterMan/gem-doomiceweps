class GWM_BurstRifle : GWM_WeaponBase
{
	action void A_FireRifle()
	{
		A_SpawnItemEx("GWM_Flash");
		ZWL_FireHitscan(3, 20, tracerType: "GWM_Tracer");
		ZWL_EjectCasing("GWM_RifleCasing");
		A_WeaponOffset(0, 6, WOF_ADD);
		A_SetPitch(pitch-0.25);
		A_Setangle(angle+frandom(-.25,.25));
		A_SpawnItemEx("GWM_MuzzleFlashLight2",0,0,5);
	}
	action void A_FireRifleBurst()
	{
		invoker.ammocount = invoker.ammocount - 2;
		A_SpawnItemEx("GWM_Flash");
		A_RailAttack((25),0,true,"",0,RGF_SILENT,0,"ZBulletPuff",3,2,0,0,1,0.5,"none");
		ZWL_FireHitscan(1, 0, tracerType: "GWM_Tracer");
		ZWL_EjectCasing("GWM_RifleCasing");
		A_WeaponOffset(0, 6, WOF_ADD);
		A_SetPitch(pitch-0.5);
		A_Setangle(angle+frandom(-.5,.5));
		A_SpawnItemEx("GWM_MuzzleFlashLight2",0,0,5);
	}
	Default
	{
		//$Category Weapons
		//$Title "Burst Rifle"
		Weapon.SelectionOrder 700;
		Weapon.SlotNumber 4;
		Weapon.AmmoUse1 1;
		Weapon.AmmoType1 "GWM_FMJMagazine";
		Weapon.AmmoGive 32; // as opposed to 31, since we're firing in bursts of four now
		Weapon.AmmoUse2 0;
		Weapon.AmmoType2 "GWM_FMJMagazine";
		Weapon.UpSound "weapons/draw_primary";

		ZWeapon.MagazineSize 32;
		ZWeapon.ReloadSound "weapons/riflein";
		ZWeapon.ClickSound "weapons/92fsdryfire";

		Inventory.PickupMessage "$GOTBURSTRIFLE";

		Tag "$TAG_BURSTRIFLE";
		AttackSound "weapons/riflesht";
		Obituary "$KILLBURSTRIFLE";
		+ALLOWTHRUFLAGS
		+THRUGHOST

		GWM_WeaponBase.BaseVersion "GWM_AssaultRifle";
	}
	States
	{
		Ready:
			BRSG A 1 ZWL_WeaponReady();
			Loop;
		Select:
			TNT1 A 0 {
				ZWL_QuickRaise();
				A_WeaponOffset(-64, 160);
			}
			BRSG QQQQQQ 1 {
				A_WeaponOffset(8, -16, WOF_ADD);
			}
			BRSG QQ 1 {
				A_WeaponOffset(8, -16, WOF_ADD);
			}
			BRSG TTSS 1 ZWL_WeaponReady();
			BRSG R 4 {A_StartSound("weapons/riflebak"); ZWL_WeaponReady();}
			BRSG SSTT 1 ZWL_WeaponReady();
			BRSG Q 1 {A_StartSound("weapons/riflefwd"); ZWL_WeaponReady();}
			Goto Ready;
		Deselect:
			BRSG AA 1 {
				A_WeaponOffset(-8, 16, WOF_ADD);
			}
			BRSG QQQQQQ 1 {
				A_WeaponOffset(-8, 16, WOF_ADD);
			}
			TNT1 A 0 A_WeaponOffset(0, flags: WOF_KEEPY);
			TNT1 A 0 ZWL_QuickLower;
			Stop;
/*		Deselect:
			BRSG A 1 A_Lower(18);
			Loop;
		Select:
			BRSG A 1 A_Raise(18);
			Loop;*/
		Fire:
			TNT1 A 0 ZWL_CheckReload();
			BRSG B 1 Bright A_FireRifle;
			BRSG CA 1 Bright A_WeaponOffset(0, -3, WOF_ADD);
			BRSG A 4 ZWL_ReFire(null, true);
			Goto Ready;
		AltFire:
			TNT1 A 0 A_Jumpif(invoker.ammocount < 2,"Reload");
			BRSG B 1 Bright A_FireRifleBurst;
			BRSG C 1 A_WeaponOffset(0, -6, WOF_ADD);
			TNT1 A 0 A_Jumpif(invoker.ammocount < 2,"Reload");
			BRSG B 1 Bright A_FireRifleBurst;
			BRSG C 1 A_WeaponOffset(0, -6, WOF_ADD);
			TNT1 A 0 A_Jumpif(invoker.ammocount < 2,"Reload");
			BRSG B 1 Bright A_FireRifleBurst;
			BRSG C 1 A_WeaponOffset(0, -6, WOF_ADD);
			TNT1 A 0 A_Jumpif(invoker.ammocount < 2,"Reload");
			BRSG B 1 Bright A_FireRifleBurst;
			BRSG C 1 A_WeaponOffset(0, -6, WOF_ADD);
			TNT1 A 0 A_Jumpif(invoker.ammocount < 2,"Reload");
			BRSG A 9;
			BRSG A 0 ZWL_ReFire(null, true);
			Goto Ready;
		Spawn:
			BRSG Z -1;
			Stop;
		Reload:
			TNT1 A 0 {
				if (!invoker.CheckAmmo(PrimaryFire, false, true))
					player.SetPSPrite(OverlayID(), ResolveState("Ready")); // Disallow reloading if there's no more ammo
			}
			BRSG D 4;
			BRSG PO 2;
			BRSG N 4 A_StartSound("weapons/riflebak");
			TNT1 A 0 A_StartSound("weapons/rifleout");
			BRSG EF 2;
			TNT1 A 0 ZWL_EjectCasing("GWM_PistolEmptyMag", true, 45, 2, 16, (24, 0, -24));
			BRSG GHIJK 3;
			BRSG L 4 ZWL_Reload();
			BRSG MD 2;
			BRSG NO 2;
			BRSG P 4 A_StartSound("weapons/riflefwd");
			BRSG D 2;
			Goto Ready;
	}
}