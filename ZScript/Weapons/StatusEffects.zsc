class IceSlowCount : Inventory
{
	Default
	{
		Inventory.MaxAmount 250;
	}
}

class GWM_IceStatusEffect : Actor
{
	
	int Originalspeed;
	
	Default
	{
		+THRUACTORS;
		Scale 1.75;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 
			{
				
				if (target != null && target.CountInv("IceSlowCount") == 0)
				{
					target.A_SpawnItemEX("GWM_IceStatusThinker",0,3);
				}
			} 
			TNT1 A 0 A_GivetoTarget("IceSlowCount",15);
			//TNT1 A 0 A_CheckProximity("Death","GWM_IceStatusThinker",40);
			
		Death:
			TNT1 A 2;
			stop;
	}
}


class GWM_IceStatusThinker : Actor
{
	
	int cycletics;
	int Originalspeed;
	
	Default
	{
		+THRUACTORS;
		Scale 1.75;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			
			TNT1 A 0 A_CheckProximity("AttemptToRemove","GWM_IceStatusThinker",4,1);
			
			TNT1 AAAAAAA 0
			{
			if (target != null)
				{
				target.A_SpawnItemEX("StatusIceCrystal",0,0,10);
				}
			}	
			
			TNT1 A 1 
		    {
			if (target != null)
				{
				originalspeed = target.Speed;			
				}		
			}
		 Cycle:
			TNT1 A 0
			{
			if (target != null && target.CountInv("IceSlowCount") == 0)
					{
						SetStateLabel("Death");
					}
			}
			
			
			
			
			TNT1 AAAAA 1 A_Warp(AAPTR_TARGET,0,0,15,0,WARPF_INTERPOLATE);
			TNT1 A 0 
			{
			if (target != null)
				{
					
					target.TakeInventory("IceSlowCount",1);
					
					if (OriginalSpeed > 3)
					{
					target.Speed = originalspeed - (0.05 *target.CountInv("IceSlowCount"));			
					}
					else
					{
					target.Speed = originalspeed -( target.CountInv("IceSlowCount")*0.004);			
					}
					
					if (target.health < 1)
					{
						SetStateLabel("Death");
					}
					
					if (target.Speed < 0)
					{
						target.Speed = 0;
					}
					
				}
			
			
			if (!target)
				{
				SetStateLabel("Death");
				}
			
			}
			TNT1 A 0 A_Warp(AAPTR_TARGET,0,0,15);
			
			goto Cycle;
			
			WaitToCycle:
			TNT1 B 2
			{
			target.speed = originalspeed;
			}
			goto Cycle;
			
			Death:
			TNT1 B 0;
			stop;
			
			AttemptToRemove:
			TNT1 A 0 A_Jump(1,"AttemptToRemove2");
			goto Spawn;
			
			AttemptToRemove2:
			TNT1 A 0 A_Jump(1,"Death");
			goto Spawn;
	}
}


Class StatusIceCrystal : Actor
{
	Default
	{
		+NoInteraction;
		+ForceXYBillboard;
		+NoGravity;
		Renderstyle "Translucent";
		Alpha 0.75;
	}
	double posX ;
	double posY ;
	double posZ ;

	int SlowCount ;
	double StartSize ;
	
	States
	{
		Spawn:
			TNT1 A 0 nodelay
			{
				if (target != null)
				{
					posX = random(-target.radius*0.75,target.radius*0.75);
					posY = random(-target.radius*0.75,target.radius*0.75);
					posZ = random(2,target.height);
					StartSize = frandom(0.1,0.5);
				}
			}
		Loopit:
			ICFX A 1 Bright 
			{
			invoker.Slowcount = target.CountInv("IceSlowCount");
			A_Warp(AAPTR_TARGET,posX,posY,posZ,0,WARPF_INTERPOLATE);
			A_SetScale(StartSize+invoker.Slowcount*0.01,StartSize+invoker.Slowcount*0.01);
			}
			
			ICFX A 0 A_JumpIf(target.health < 1, "Death");
			ICFX A 1 A_JumpIfInTargetInventory("IceSlowCount",1,"Loopit");
			stop;
			
		Death:
			TNT1 AA 1 
			{ 
			A_SpawnItemEX("StatusIceChunk",0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,6));
			A_SpawnItemEX("StatusIceChunk",0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,6));
			if (invoker.Slowcount > 10)
				{A_SpawnItemEX("StatusIceChunk",0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,6));}
			if (invoker.Slowcount > 20)
				{A_SpawnItemEX("StatusIceChunk",0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,6));}
			if (invoker.Slowcount > 30)
				{A_SpawnItemEX("StatusIceChunk",0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,6));}
			if (invoker.Slowcount > 40)
				{A_SpawnItemEX("StatusIceChunk",0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,6));}
			if (invoker.Slowcount > 50)
				{A_SpawnItemEX("StatusIceChunk",0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,6));}
			if (invoker.Slowcount > 60)
				{A_SpawnItemEX("StatusIceChunk",0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,6));}
			}
			stop;
	}
}

Class StatusIceChunk : Actor
{
	Default
	{
		+ForceXYBillboard;
		Renderstyle "Translucent";
		Alpha 0.75;
		Scale 0.6;
	}
	States
	{
		Spawn:
			ICFX A 1 Bright 
			{
			A_SetScale(Scale.X-0.01,Scale.Y-0.01);
			}
			
			ICFX A 0 A_JumpIf(Scale.X < 0, "Death");
			loop;
		Death:
			TNT1 A 1;
			stop;
	}
}

class FireBurnCount : Inventory
{
	Default
	{
		Inventory.MaxAmount 250;
	}
}


class GWM_FlameStatusThinker : Actor
{
	
	int cycletics;
	
	Default
	{
		+THRUACTORS;
		Scale 1.75;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			
			TNT1 A 0 A_CheckProximity("AttemptToRemove","GWM_FlameStatusThinker",4,1);
		 Cycle:
			TNT1 A 0
			{
			if (target != null && target.CountInv("FireBurnCount") == 0)
					{
						SetStateLabel("Death");
					}
			}
			
			
			
			
			TNT1 AAAAA 1 
			{
			if (target != null)
				{
				A_Warp(AAPTR_TARGET,0,0,1,0,WARPF_INTERPOLATE);
				A_spawnItemEX("GWM_FireDMGFX",frandom(-target.radius,target.radius),frandom(-target.radius,target.radius),frandom(2,target.height),frandom(-2,2),frandom(-2,2),frandom(3,5));
				A_spawnItemEX("GWM_FireDMGFX",frandom(-target.radius,target.radius),frandom(-target.radius,target.radius),frandom(2,target.height),frandom(-2,2),frandom(-2,2),frandom(3,5));
				
				if (target.CountInv("FireBurnCount")>25)
				{A_spawnItemEX("GWM_FireDMGFX",frandom(-target.radius,target.radius),frandom(-target.radius,target.radius),frandom(2,target.height),frandom(-2,2),frandom(-2,2),frandom(3,5));}
				
				if (target.CountInv("FireBurnCount")>80)
				{A_spawnItemEX("GWM_FireDMGFX",frandom(-target.radius,target.radius),frandom(-target.radius,target.radius),frandom(2,target.height),frandom(-2,2),frandom(-2,2),frandom(3,5));}
			
				if (target.CountInv("FireBurnCount")>120)
				{A_spawnItemEX("GWM_FireDMGFX",frandom(-target.radius,target.radius),frandom(-target.radius,target.radius),frandom(2,target.height),frandom(-2,2),frandom(-2,2),frandom(3,5));}
			
				if (target.CountInv("FireBurnCount")>160)
				{A_spawnItemEX("GWM_FireDMGFX",frandom(-target.radius,target.radius),frandom(-target.radius,target.radius),frandom(2,target.height),frandom(-2,2),frandom(-2,2),frandom(3,5));}
			
				
				}
			}
			
			
			TNT1 A 0 
			{
			if (target != null)
				{
					
					target.TakeInventory("FireBurnCount",1);
					target.A_DamageSelf(1,"fire");
					
				}
			
			
			if (!target)
				{
				SetStateLabel("Death");
				}
			
			}
			TNT1 A 0 A_Warp(AAPTR_TARGET,0,0,15);
			
			goto Cycle;
			
			Death:
			TNT1 B 0;
			stop;
			
			AttemptToRemove:
			TNT1 A 0 A_Jump(1,"AttemptToRemove2");
			goto Spawn;
			
			AttemptToRemove2:
			TNT1 A 0 A_Jump(1,"Death");
			goto Spawn;
	}
}

Class GWM_FireDMGFX : Actor
{
	Default
	{
		Scale 0.75;
		RenderStyle "Add";
		+NoInteraction;
		+ForceXYBillboard;
	}

	States
	{
	Spawn:
		FRPR ABCDEFGH 2 bright;
		stop;
	}
}


class AcidWeakCount : Inventory
{
	Default
	{
		Inventory.MaxAmount 250;
	}
}


class GWM_AcidStatusThinker : Actor
{
	
	int cycletics;
	
	Default
	{
		+THRUACTORS;
		Scale 1.75;
	}
	States
	{
		Spawn:
			TNT1 A 0;
			
			TNT1 A 0 A_CheckProximity("AttemptToRemove","GWM_AcidStatusThinker",4,1);
		 Cycle:
			TNT1 A 0
			{
			if (target != null && target.CountInv("AcidWeakCount") == 0)
					{
						SetStateLabel("Death");
					}
			}
			
			
			
			
			TNT1 AAAA 1 
			{
			if (target != null)
				{
				A_Warp(AAPTR_TARGET,0,0,1,0,WARPF_INTERPOLATE);
				}
			}
			
			
			TNT1 A 0 
			{
			if (target != null)
				{
					
					target.TakeInventory("AcidWeakCount",1);
					target.GiveInventory("PowerAcidWeakness",1);
					A_spawnItemEX("GWM_AcidDMGFX",frandom(-target.radius,target.radius),frandom(-target.radius,target.radius),frandom(7,target.height));
				
				}
			
			
			if (!target)
				{
				SetStateLabel("Death");
				}
			
			}
			TNT1 A 0 A_Warp(AAPTR_TARGET,0,0,15);
			
			goto Cycle;
			
			Death:
			TNT1 B 0;
			stop;
			
			AttemptToRemove:
			TNT1 A 0 A_Jump(1,"AttemptToRemove2");
			goto Spawn;
			
			AttemptToRemove2:
			TNT1 A 0 A_Jump(1,"Death");
			goto Spawn;
	}
}

Class GWM_AcidDMGFX : Actor
{
	Default
	{
		Scale 0.5;
		+ForceXYBillboard;
		Projectile;
		+NOCLIP;
		-NoGravity;
	}

	States
	{
	Spawn:
		ACFX A 1 bright A_Checkfloor("Death");
		loop;
	Death:
		TNT1 A 0;
		stop;
	}
}

Class PowerAcidWeakness : PowerProtection
{
	Default
	{
		DamageFactor "Normal", 2;
		DamageFactor "Ice", 2.5;
		DamageFactor "Fire", 2.5;
		Powerup.Duration 10;
	}
}