class GWM_Dynamite : GWM_WeaponBase
{
	int throwSpd;
	Default
	{
		//$Category Weapons
		//$Title "Dynamite Bundle
		Weapon.SelectionOrder 1900;
		Weapon.SlotNumber 0;
		Tag "$TAG_DYNAMITE";
		Weapon.AmmoUse 1;
		Weapon.AmmoType "GWM_DynamiteAmmo";
		Weapon.AmmoGive 2;
		Inventory.PickupMessage "$GOTDYNAMITE";
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOAUTOSWITCHTO
		ZWeapon.MaxCharge 70;
		Scale 0.25;
	}
	States
	{
		Select:
			DYNW E 1 A_Raise(18);
			Loop;
		Deselect:
			DYNW F 2 A_StartSound("weapons/dynalightc");
			Goto Closed;
		Closed:
			DYNW E 1 A_Lower(18);
			Loop;
		Spawn:
			DYNW Z -1;
			Stop;
		Ready:
			DYNW E 2 A_StartSound("weapons/dynalighto");
			Goto ReallyReady;
		ReallyReady:
			DYNW F 1 ZWL_WeaponReady;
			Loop;
		Fire:
			DYNW F 5 A_StartSound("weapons/dynalightl");
			TNT1 A 0 ZWL_ReFire('Hold', true);
			Goto Release;
		Hold:
			TNT1 A 0 A_StartSoundIfNotSame("weapons/dynafuse", "weapons/dynafuse");
			DYNW A 1 ZWL_Charge('Overcharged');
			TNT1 A 0 ZWL_ReFire('Hold', true);
			Goto Release;
		Release:
			TNT1 A 0 {
				if (invoker.chargeLevel > 35)
					invoker.throwSpd = 35;
				else
					invoker.throwSpd = invoker.chargeLevel;
				A_StartSound("weapons/dynathrow");
			}
			DYNW B 5 {
				let dynamite = GWM_ThrownDynamiteBundle(ZWL_FireProjectile("GWM_ThrownDynamiteBundle", 0, speed: invoker.throwSpd));
				if (dynamite)
				{
					dynamite.ReactionTime = invoker.maxCharge - invoker.chargeLevel;
				}
			}
			TNT1 A 0 {invoker.chargeLevel = 0; invoker.throwSpd = 0;}
			Goto ReallyReady;
		Overcharged:
			DYNW A 5 {
				let dynamite = GWM_ThrownDynamiteBundle(ZWL_FireProjectile("GWM_ThrownDynamiteBundle", 0));
				if (dynamite)
				{
					dynamite.ReactionTime = 1;
				}
			}
			TNT1 A 0 {invoker.chargeLevel = 0; invoker.throwSpd = 0;}
			Goto ReallyReady;
	}
}
class GWM_ThrownDynamiteBundle : Actor
{
	override int SpecialBounceHit(Actor bounceMobj, Line bounceLine, secPlane bouncePlane)
	{
		if (bouncePlane)
		{
			self.Vel.X = self.Vel.X/1.1;
			self.Vel.Y = self.Vel.Y/1.1;
			return 1;
		}
		else if (bounceMobj)
		{
			self.Vel.X = 0;
			self.Vel.Y = 0;
			return -1;
		}
		else
			return Super.SpecialBounceHit(bounceMobj, bounceLine, bouncePlane);
	}
	override void Tick()
	{
		Super.Tick();
		if (!BlockingFloor && !Blocking3DFloor)
		{
			if (!InStateSequence(CurState, ResolveState('Spawn')) && !InStateSequence(CurState, ResolveState('Boom')))
				SetStateLabel("Spawn");
		}
		else
		{
			if (!InStateSequence(CurState, ResolveState('Floor')) && !InStateSequence(CurState, ResolveState('Boom')))
				SetStateLabel("Floor");
		}
		if (InStateSequence(CurState, ResolveState('Floor')))
			self.Vel.Z = -0.1;
	}
	void A_Countdown()
	{
		self.ReactionTime--;
		if (self.ReactionTime == 0)
			SetStateLabel("Boom");
	}
	Default
	{
		Projectile;
		+ALLOWBOUNCEONACTORS +BOUNCEONACTORS
		-NOGRAVITY
		BounceType "Hexen";
		Gravity 0.75;
		Radius 8;
		Height 8;
		Scale 0.5;
		DamageType "Rocket";
		SeeSound "weapons/dynafuse";
		DeathSound "weapons/dynabsplod";
		Obituary "$KILLDYNAMITE";
	}
	States
	{
		Spawn:
			PDYN AABBCCDDEEFFGGHH 1 A_Countdown;
			Loop;
		Floor:
			PDYN IIJJKK 1 A_Countdown;
			Loop;
		Boom:
			TNT1 A 0 A_StopSound(CHAN_VOICE);
			TNT1 A 0 {
				bMISSILE = false;
				bNOGRAVITY = true;
				self.Vel.X = 0;
				self.Vel.Y = 0;
				self.Vel.Z = 0;
				self.Scale = (1, 1);
				A_Scream();
				A_SetRenderstyle(alpha, STYLE_Add);
				A_Explode();
				A_QuakeEx(3, 3, 3, 10, 0, 512, flags: QF_SHAKEONLY);
			}
			EXPL ABCDEFGHIJ 1 Bright;
			Stop;
	}
}