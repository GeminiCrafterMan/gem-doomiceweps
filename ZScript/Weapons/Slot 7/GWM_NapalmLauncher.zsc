class GWM_NapalmLauncher : GWM_WeaponBase
{
	Default
	{
		Weapon.SelectionOrder 2800; // Don't waste ammo, and don't blow yourself to smithereens!
		Weapon.UpSound "weapons/draw_primary";
		Weapon.AmmoType "GWM_NapalmAmmo";
		Weapon.AmmoGive 2;
		Weapon.AmmoUse 1;
		+WEAPON.NOAUTOFIRE
		Tag "Napalm Launcher";
		Inventory.PickupMessage "$GOTNAPALMLAUNCHER";
		Obituary "$KILLPLACEHOLDER";
	}
	States
	{
		Spawn:
			NLAG Z -1;
			Stop;
		Ready:
			NLAG A 1 A_WeaponReady;
			Loop;
		Select:
			NLAG A 1 A_Raise(12);
			Loop;
		Deselect:
			NLAG A 1 A_Lower(12);
			Loop;
		Fire:
			NLAG BCDEF 2;
			TNT1 A 0 {
				A_StartSound("weapons/napalmfire", CHAN_WEAPON);
				A_FireProjectile("GWM_NapalmBall");
				A_SetPitch(pitch-4);
			}
			NLAG GHIJK 2 A_SetPitch(pitch+0.8, SPF_INTERPOLATE);
			NLAG A 4;
			TNT1 A 0 A_ReFire;
			Goto Ready;
	}
}
class GWM_NapalmBall : Actor
{
	bool missed;
	int timer;
	action State GrenadeTimerJump()
	{
		if (invoker.timer < 81) {
			if (!invoker.missed) {
				return ResolveState(null);
			}
			else invoker.timer++;
		}
		if (invoker.timer >= 81) {
			return ResolveState("Death");
		}
		return State(null);
	}
	Default
	{
		Radius 17;
		Height 15;
		Speed 25;
		Damage 20;
		Projectile;
		-NOGRAVITY
		+RANDOMIZE
		+USEBOUNCESTATE
		+THRUGHOST
		BounceType "Grenade";
		Gravity 0.5;
		SeeSound "";
		DeathSound "weapons/grndimp";
		BounceSound "weapons/grndimp";
		Obituary "$KILLGRENADE";
		DamageType "Grenade";
	}
	States
	{
		Spawn:
			NLAP AAAABBBB 1 Bright GrenadeTimerJump;
			Loop;
		Bounce:
			TNT1 A 0 {invoker.missed = true;}
			Goto Spawn;
		Death:
			TNT1 A 0 {
//				bMISSILE = false;
				bNOGRAVITY = true;
				self.Vel.X = 0;
				self.Vel.Y = 0;
				self.Vel.Z = 0;
				A_StartSound("weapons/explode");
				A_SetRenderstyle(alpha, STYLE_Add);
				A_Explode();
			}
			EXPL ABCDE 1 Bright;
			TNT1 A 0 {
				for (int i; i < 10; i++) {
					A_SpawnItemEx("GWM_NapalmFire", xvel: 5, zvel: 10, angle: i*18, flags: SXF_ORIGINATOR|SXF_TRANSFERPOINTERS);
					A_SpawnItemEx("GWM_NapalmFire", xvel: 5, zvel: 10, angle: i*36, flags: SXF_ORIGINATOR|SXF_TRANSFERPOINTERS);
					A_SpawnItemEx("GWM_NapalmFire", xvel: 2.5, zvel: 10, angle: i*36, flags: SXF_ORIGINATOR|SXF_TRANSFERPOINTERS);
					A_SpawnItemEx("GWM_NapalmFire", xvel: 1.25, zvel: 10, angle: i*36, flags: SXF_ORIGINATOR|SXF_TRANSFERPOINTERS);
				}
			}
			EXPL FGHIJ 1 Bright;
			Stop;
	}
}
class GWM_NapalmFire : GWM_FlameProjectile
{
/*	override int SpecialMissileHit (Actor victim)
	{
		if (target && victim == target)
		{
//			A_DamageTarget(1);
			Console.Printf("touched");
//			A_GiveInventory("GWM_FireDamage", giveto:);
			return super.SpecialMissileHit(target);
		}

		return super.SpecialMissileHit(victim);
	}*/
	override void Tick()
	{
		Super.Tick();
		if (self.waterlevel > 0)
		{
			SetState(ResolveState(null));
		}
	}
	Default
	{
//		+HITTARGET
		-NOGRAVITY
		+ZDOOMTRANS
		+USEBOUNCESTATE
//		+RIPPER
		Damage 1;
		Height 24;
		Radius 16;
		BounceType "Grenade";
		ReactionTime 70;
		RenderStyle "Add";
		Alpha 1;
		Scale 0.5;
		Obituary "$KILLNAPALMFIRE";
	}
	States
	{
		Spawn:
			FIRE ABABCBCB 2 Bright;
			Goto Countdown;
		Bounce:
			TNT1 A 0 A_Stop;
			Goto Countdown;
		Countdown:
			TNT1 A 0 A_StartSound("vile/firecrkl");
			FIRE CDCDCDCDCD 2 Bright A_Countdown;
			Loop;
		Death:
			FIRE EDEDEFEFEFGHGHGH 2 Bright;
			Stop;
	}
}