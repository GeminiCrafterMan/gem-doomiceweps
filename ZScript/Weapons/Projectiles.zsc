class GWM_IceProjectile : Actor // the absolute most basic projectile base possible
{
	int iceSlowCount;
	actor victim;

	Property IceSlowCount: iceSlowCount;

	override int SpecialMissileHit(actor victim) //decides how to spawn the ice thinker
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_Die("Ice");
				return 1;
			}

			if (victim.CountInv("IceSlowCount")== 0 && victim.CountInv("GWM_IsPlayer")== 0 )
			{
				victim.A_SpawnProjectile("GWM_IceStatusThinker");
			}
			A_StartSound("Status/IceHit");

			victim.A_GiveInventory("IceSlowCount",iceSlowCount);

		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	Default
	{
		Projectile;
		DamageType "Ice";
		GWM_IceProjectile.IceSlowCount 0;
		+ICESHATTER;
	}
}

class GWM_FlameProjectile : Actor // the absolute most basic projectile base possible
{
	int FireBurnCount;
	actor victim;

	Property FireBurnCount: FireBurnCount;

	override int SpecialMissileHit(actor victim) //decides how to spawn the ice thinker
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			victim.A_GiveInventory("FireBurnCount",FireBurnCount);
			if (victim.health <= self.Damage)
			{
				victim.A_Die("Fire");
				return 1;
			}

			if (victim.CountInv("FireBurnCount")== 0 && victim.CountInv("GWM_IsPlayer")== 0 )
			{
				victim.A_SpawnProjectile("GWM_FlameStatusThinker");
			}
			A_StartSound("Status/IceHit");

			
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	Default
	{
		Projectile;
		DamageType "Fire";
	}
}

class GWM_AcidProjectile : Actor // the absolute most basic projectile base possible
{
	int AcidWeakCount;
	actor victim;

	Property AcidWeakCount: AcidWeakCount;

	override int SpecialMissileHit(actor victim) //decides how to spawn the ice thinker
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_GiveInventory("AcidWeakCount",AcidWeakCount);
				victim.A_Die("Acid");
				return 1;
			}

			if (victim.CountInv("AcidWeakCount")== 0 && victim.CountInv("GWM_IsPlayer")== 0)
			{
				victim.A_SpawnProjectile("GWM_AcidStatusThinker");
			}
			A_StartSound("Status/IceHit");
			victim.A_GiveInventory("AcidWeakCount",AcidWeakCount);
			
			
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	
	Default
	{
		Projectile;
		DamageType "Acid";
	}
}


class GWM_PoisonProjectile : Actor // the absolute most basic projectile base possible
{
	Default
	{
		Projectile;
		DamageType "Poison";
		//PoisonDamage 12, 123;
		+ADDITIVEPOISONDAMAGE
	}
}