class IceProjectile : Actor // the absolute most basic projectile base possible
{
	actor victim;
	override int SpecialMissileHit(actor victim) //thanks mengo
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
		if (victim.health <= 90)
			{
			victim.A_SpawnProjectile("IceDamageEffect");
			victim.A_Die("ice");
			return 1;
			}
		victim.A_SpawnProjectile("IceDamageEffect");
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	Default
	{
		Projectile;
		DamageType "Ice";
		+ICESHATTER;
	}
}

class ShotgunIce : IceProjectile
{
	Default
	{
		Radius 13;
		Height 13;
		Speed 50;
		Damage 12;
		Scale 2;
		+RANDOMIZE;
		SeeSound "weapons/iceshot";
		DeathSound "weapons/icehit";
		Obituary "%o got frozen solid by %k's Ice Shotgun.";
	}
	States
	{
		Spawn:
			SHGI A 6 Bright A_SpawnItemEx("ShotgunIceTrail");
			loop;
		Death:
			TNT1 A 1 {
				A_SpawnItemEx("ShotgunIceChunk", 0, 0, 0, -50, 0, 0, 10);
				A_SpawnItemEx("ShotgunIceChunk", 0, 0, 0, -50, 0, 5, 0);
				A_SpawnItemEx("ShotgunIceChunk", 0, 0, 0, -50, 0, 0, 0);
				A_SpawnItemEx("ShotgunIceChunk", 0, 0, 0, -50, 0, -5, 0);
				A_SpawnItemEx("ShotgunIceChunk", 0, 0, 0, -50, 0, 0, -10);
			}
			stop;
		XDeath:
			SHGI FBCDE 4 Bright;
//			TNT1 A 0 A_ScaleVelocity(0.50, AAPTR_TARGET);	// AAPTR_TARGET is the player, for some reason.
			Stop;
	}
}

class ShotgunIceChunk : ShotgunIce
{
	Default
	{
		Radius 7;
		Height 7;
		Damage 6;
		+RIPPER
		BounceType "Doom";
		BounceCount 2;
	}
	States
	{
		Spawn:
			SHGI F 6 Bright A_SpawnItemEx("ShotgunIceTrail");
			loop;
		Death:
			SHGI BCDE 4 Bright;
			stop;
	}
}

class ShotgunIceTrail : Actor
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 45; // parent - 5
		Damage 0;
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
	//  SeeSound "weapons/iceshot";
		DeathSound "weapons/icehit";
		Obituary "%o got frozen solid by %k.";
	}
	States
	{
		Spawn:
			SHGI BCDE 6 Bright A_FadeOut(0.2);
			loop;
		Death:
			SHGI BCDE 4 Bright;
			stop;
	}
}

class PerfectFreezeBullet : IceProjectile
{
	action State PerfectFreezeTimerJump()
	{
		if (GetAge() == 3*35) {
			A_StartSound("weapons/power1");
			A_Stop();
			return ResolveState("White");
		}
		if (GetAge() >= 30*35) {A_FadeOut();}
		return State(null);
	}
	Default
	{
//		Scale 0.5;
		Radius 6;
		Height 8;
		Speed 20;
		Damage 3;
		Projectile;
		+RIPPER
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOGRAVITY
		DamageType "Ice";
		+ICESHATTER;
		BounceType "Doom";
		DeathSound "weapons/pfgraze";
		RipSound "weapons/pfdamage";
	}
	States
	{
		Spawn:
			PFBU F 1 Bright A_Jump(256, "Red", "Blue", "Green", "Yellow", "Orange");
			Loop;
		Red:
			PFBU A 1 Bright PerfectFreezeTimerJump;
			Loop;
		Blue:
			PFBU B 1 Bright PerfectFreezeTimerJump;
			Loop;
		Green:
			PFBU C 1 Bright PerfectFreezeTimerJump;
			Loop;
		Yellow:
			PFBU D 1 Bright PerfectFreezeTimerJump;
			Loop;
		Orange:
			PFBU E 1 Bright PerfectFreezeTimerJump;
			Loop;
		White:
			PFBU F 1 Bright {
				bRIPPER = false;
				bBOUNCEONWALLS = false;
				bBOUNCEONFLOORS = false;
				bBOUNCEONCEILINGS = false;
				bBOUNCEAUTOOFFFLOORONLY = false;
				PerfectFreezeTimerJump();
			}
			Loop;
		Death:
			PFBU F 1 Bright A_FadeOut(0.1);
			Loop;
	}
}

class IceCubeGrenade : IceProjectile
{
	Default
	{
		BounceCount 5;
		Damage 20;
		Height 32;
		Radius 32;
		Speed 25;
		-NOGRAVITY
		+RANDOMIZE
		+BOUNCEONWALLS
		+SOLID
		+NOEXPLODEFLOOR
		Obituary "%o failed to catch %k's sliding ice cube.";
	}
	States
	{
		Spawn:
			ICGP A 1 Bright;
			Loop;
		Death:
			MISL B 8 Bright A_Explode;
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
		Grenade:
			MISL A 1000 A_Die;
			Wait;
		Detonate:
			MISL B 4 A_Scream;
			MISL C 6 A_Detonate;
			MISL D 10;
			Stop;
		// i'm not adding the fucking mushroom state there's absolutely no reason to
	}
}