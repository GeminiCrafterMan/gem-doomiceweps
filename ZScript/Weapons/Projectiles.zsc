class GWM_IceProjectile : Actor // the absolute most basic projectile base possible
{
	actor victim;
	override int SpecialMissileHit(actor victim) //thanks mengo
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_SpawnProjectile("GWM_IceDamageEffect");
				victim.A_Die("Ice");
				return 1;
			}
			victim.A_SpawnProjectile("GWM_IceDamageEffect");
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	Default
	{
		Projectile;
		DamageType "Ice";
		+ICESHATTER;
	}
}

class GWM_FlameProjectile : Actor // the absolute most basic projectile base possible
{
	actor victim;
	override int SpecialMissileHit(Actor victim) //thanks mengo
    {
        if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			if (victim.health <= self.Damage)
			{
				victim.A_SpawnProjectile("GWM_FlameDamageEffect");
				victim.A_Die("Fire");
				return 1;
			}
			victim.A_SpawnProjectile("GWM_FlameDamageEffect");
		}
        return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
    }
	Default
	{
		Projectile;
		DamageType "Fire";
	}
}
class GWM_FireDamage : CustomInventory
{
	States
	{
		Pickup:
			TNT1 A 0 A_SpawnItemEx("GWM_FlameDamageEffect",0,0,20,0,0,0,0,SXF_SETMASTER);
			Stop;
	}
}

class GWM_PoisonProjectile : Actor // the absolute most basic projectile base possible
{
	Default
	{
		Projectile;
		DamageType "Poison";
		PoisonDamage 12, 123;
		+ADDITIVEPOISONDAMAGE
	}
}