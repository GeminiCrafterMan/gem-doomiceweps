class GWM_IceShotgun : Shotgun
{
	/*
	Ejects a bullet casing to the side.
	Params:
	 - casingType: Type of actor to eject.
	 - left: If true, casing ejects to the left. Otherwise it ejects to the right.
	 - ejectPitch: Pitch at which casing ejects, relative to view direction.
	 - speed: Speed at which casing ejects.
	 - accuracy: Random spread, in degrees.
	 - offset: Offset from which casing is ejected, relative to center of view.
	*/
	action void ZWL_EjectCasing(class<Actor> casingType, bool left = false, double ejectPitch = -45, double speed = 4,
								double accuracy = 8, Vector3 offset = (24, 0, -10))
	{
		// Find offset vector
		// +y axis is to the right for offsets
		offset.y *= -1;

		// Rotate offset by pitch
		Vector2 xz = RotateVector((offset.x, offset.z), -pitch);
		offset.x = xz.x;
		offset.z = xz.y;

		// Rotate vector by angle
		offset.xy = RotateVector(offset.xy, angle);

		// Move to player camera
		offset.xy += pos.xy;
		offset.z += player.viewZ;

		// Find velocity vector
		Vector3 side = (Cos(angle + (left ? 90 : -90)), Sin(angle + (left ? 90 : -90)), 0);
		Vector3 up = (Cos(pitch-90) * Cos(angle), Cos(pitch-90) * Sin(angle), -Sin(pitch-90));
		Vector3 baseDirection = Cos(-ejectPitch) * side + Sin(-ejectPitch) * up;

		double baseAngle = VectorAngle(baseDirection.x, baseDirection.y);
		baseDirection.xy = RotateVector(baseDirection.xy, -baseAngle);
		double basePitch = -VectorAngle(baseDirection.x, baseDirection.z);

		double casAngle, casPitch;
		[casAngle, casPitch] = invoker.BulletAngle(accuracy, baseAngle, basePitch);

		let casing = Spawn(casingType, offset);
		casing.Vel3dFromAngle(speed, casAngle, casPitch);
		casing.vel += vel;
	}
	// Returns random angle and pitch within cone
	// I have no idea if there's a better way of doing this ¯\_(ツ)_/¯
	// Params:
	//  - accuracy: maximum angle b/w cone's axis, and bullet trajectory
	//  - angle: angle of axis
	//  - pitch: pitch of axis
	double, double BulletAngle(double accuracy, double angle, double pitch)
	{
		Vector3 v = (0, 0, 0);

		if (accuracy > 10)
		{
			// Generate random vector in sphere section
			Vector3 axis = (Cos(pitch) * Cos(angle), Cos(pitch) * Sin(angle), -Sin(pitch));
			while (v == (0, 0, 0) || v.Length() > 1 || ACos(axis dot v.Unit()) > accuracy)
			{
				v = (FRandom(-1, 1), FRandom(-1, 1), FRandom(-1, 1));
			}

			// Extract angle and pitch from trajectory
			angle = VectorAngle(v.x, v.y);
			pitch = -ASin(v.z / v.Length());
		}
		else if (accuracy > 0)
		{
			// Generate random vector in sphere around end of axis
			double r = Sin(accuracy);
			while (v == (0, 0, 0) || v.Length() > r)
			{
				v = (FRandom(-r, r), FRandom(-r, r), FRandom(-r, r));
			}

			Vector3 axis = (Cos(pitch) * Cos(angle), Cos(pitch) * Sin(angle), -Sin(pitch));
			v += axis;

			// Extract angle and pitch from trajectory
			angle = VectorAngle(v.x, v.y);
			pitch = -ASin(v.z / v.Length());
		}

		return angle, pitch;
	}
	Default
	{
		Weapon.AmmoType "GWM_IceShell";
		Inventory.PickupMessage "$GOTICESHOTGUN";
		Obituary "$KILLPLACEHOLDER";
		Tag "Ice Shotgun";
	}
	States
	{
		Ready:
			ISHT A 1 A_WeaponReady;
			Loop;
		Deselect:
			ISHT A 1 A_Lower;
			ISHT A 0 A_Lower;
			Loop;
		Select:
			ISHT A 1 A_Raise;
			ISHT A 0 A_Raise;
			Loop;
		Fire:
			TNT1 A 0 {
				A_OverlayPivot(OverlayID(), 0.5, 0.5, 0);
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayScale(OverlayID(), 1, 0, WOF_INTERPOLATE);
				A_OverlayRotate(OverlayID(), 0, WOF_INTERPOLATE);
			}
			ISHT A 1 {
				A_FireProjectile("GWM_ShotgunIce");
				A_StartSound("weapons/iceshgn", CHAN_WEAPON);
				A_SpawnItemEx("GWM_IceFlash");
				A_Overlay(-2, "Flash");
				A_SpawnItemEx("IceFog2", 24, 0, 32, 0.5, 0, FRandom(-0.5, 0.5), Random(-12, 12));
				A_SpawnItemEx("IceFog2", 24, 0, 32, 0.5, 0, FRandom(-0.5, 0.5), Random(-12, 12));
				A_SpawnItemEx("IceFog2", 24, 0, 32, 0.5, 0, FRandom(-0.5, 0.5), Random(-12, 12));
				A_SpawnItemEx("IceFog2", 24, 0, 32, 0.5, 0, FRandom(-0.5, 0.5), Random(-12, 12));
				A_WeaponOffset(0, 20, WOF_ADD);
				A_OverlayScale(OverlayID(), 1.15, 0, WOF_INTERPOLATE);
			}
			ISHT A 2;
			ISHT AA 4 {
				A_WeaponOffset(0, -10, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.075, 0, WOF_ADD);
			}
			ISHT B 5;
			ISHT CCC 2;
			ISHT D 4 {ZWL_EjectCasing("GWM_IceShotgunCasing", offset: (24, -6, -14));}
			ISHT CCC 2;
			ISHT B 5;
			ISHT A 3;
			ISHT A 7 A_ReFire;
			Goto Ready;
		AltFire:
			TNT1 A 0 {
				A_OverlayPivotAlign(OverlayID(), PSPA_RIGHT, PSPA_BOTTOM);
				A_OverlayPivot(OverlayID(), 0.5, 0.5, 0);
				A_OverlayScale(OverlayID(), 1, 0, WOF_INTERPOLATE);
				A_OverlayRotate(OverlayID(), 0, WOF_INTERPOLATE);
			}
			ISHT A 2 {
				A_Overlay(-2, "AltFireUnderlay");
				A_OverlayRotate(OverlayID(), 15, WOF_ADD);
			}
			ISHT A 2 {
				A_OverlayRotate(OverlayID(), 15, WOF_ADD);
			}
			ISHT A 4;
			ISHT A 5;
			ISHT AA 2 A_OverlayRotate(OverlayID(), -15, WOF_ADD);
			ISHT A 5 A_ReFire;
			Goto Ready;
		AltFireUnderlay:
			KICK A 4;
			KICK B 4 A_Punch;
			KICK C 5;
			KICK B 4;
			KICK A 5;
			Stop;
		Flash:
			TNT1 A 0 A_OverlayOffset(OverlayID(), 159, 92);
			SGFL ABCCDE 1 Bright;
			Stop;
		Spawn:
			ISHT Z -1;
			Stop;
	}
}
class GWM_ShotgunIce : GWM_IceProjectile
{
	Default
	{
		Radius 13;
		Height 13;
		Speed 50;
		Damage 30;
		Scale 0.33;
		+THRUGHOST
		+RANDOMIZE
		+FORCEXYBILLBOARD
		DeathSound "weapons/icehit";
		Obituary "$KILLICESHOTGUN";
	}
	States
	{
		Spawn:
			SHGI A 6 Bright A_SpawnItemEx("GWM_ShotgunIceTrail");
			loop;
		Death:
			TNT1 A 1 {
				A_SpawnItemEx("GWM_ShotgunIceChunk", 0, 0, 0, -50, 0, 0, 10);
				A_SpawnItemEx("GWM_ShotgunIceChunk", 0, 0, 0, -50, 0, 5, 0);
				A_SpawnItemEx("GWM_ShotgunIceChunk", 0, 0, 0, -50, 0, 0, 0);
				A_SpawnItemEx("GWM_ShotgunIceChunk", 0, 0, 0, -50, 0, -5, 0);
				A_SpawnItemEx("GWM_ShotgunIceChunk", 0, 0, 0, -50, 0, 0, -10);
			}
			stop;
		XDeath:
			SHGI FBCDE 4 Bright;
//			TNT1 A 0 A_ScaleVelocity(0.50, AAPTR_TARGET);	// AAPTR_TARGET is the player, for some reason.
			Stop;
	}
}
class GWM_ShotgunIceChunk : GWM_ShotgunIce
{
	Default
	{
		Radius 7;
		Height 7;
		Damage 6;
		+RIPPER
		BounceType "Doom";
		BounceCount 2;
	}
	States
	{
		Spawn:
			SHGI F 6 Bright A_SpawnItemEx("GWM_ShotgunIceTrail");
			loop;
		Death:
			SHGI BCDE 4 Bright;
			stop;
	}
}
class GWM_ShotgunIceTrail : Actor
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 45; // parent - 5
		Damage 0;
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
		DeathSound "weapons/icehit";
		Obituary "$KILLICESHOTGUN";
	}
	States
	{
		Spawn:
			SHGI BCDE 6 Bright A_FadeOut(0.2);
			loop;
		Death:
			SHGI BCDE 4 Bright;
			stop;
	}
}