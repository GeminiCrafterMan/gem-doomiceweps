class GWM_PFSuperShotgun : SuperShotgun
{
	/*
	Ejects a bullet casing to the side.
	Params:
	 - casingType: Type of actor to eject.
	 - left: If true, casing ejects to the left. Otherwise it ejects to the right.
	 - ejectPitch: Pitch at which casing ejects, relative to view direction.
	 - speed: Speed at which casing ejects.
	 - accuracy: Random spread, in degrees.
	 - offset: Offset from which casing is ejected, relative to center of view.
	*/
	action void ZWL_EjectCasing(class<Actor> casingType, bool left = false, double ejectPitch = -45, double speed = 4,
								double accuracy = 8, Vector3 offset = (24, 0, -10))
	{
		// Find offset vector
		// +y axis is to the right for offsets
		offset.y *= -1;

		// Rotate offset by pitch
		Vector2 xz = RotateVector((offset.x, offset.z), -pitch);
		offset.x = xz.x;
		offset.z = xz.y;

		// Rotate vector by angle
		offset.xy = RotateVector(offset.xy, angle);

		// Move to player camera
		offset.xy += pos.xy;
		offset.z += player.viewZ;

		// Find velocity vector
		Vector3 side = (Cos(angle + (left ? 90 : -90)), Sin(angle + (left ? 90 : -90)), 0);
		Vector3 up = (Cos(pitch-90) * Cos(angle), Cos(pitch-90) * Sin(angle), -Sin(pitch-90));
		Vector3 baseDirection = Cos(-ejectPitch) * side + Sin(-ejectPitch) * up;

		double baseAngle = VectorAngle(baseDirection.x, baseDirection.y);
		baseDirection.xy = RotateVector(baseDirection.xy, -baseAngle);
		double basePitch = -VectorAngle(baseDirection.x, baseDirection.z);

		double casAngle, casPitch;
		[casAngle, casPitch] = invoker.BulletAngle(accuracy, baseAngle, basePitch);

		let casing = Spawn(casingType, offset);
		casing.Vel3dFromAngle(speed, casAngle, casPitch);
		casing.vel += vel;
	}
	// Returns random angle and pitch within cone
	// I have no idea if there's a better way of doing this ¯\_(ツ)_/¯
	// Params:
	//  - accuracy: maximum angle b/w cone's axis, and bullet trajectory
	//  - angle: angle of axis
	//  - pitch: pitch of axis
	double, double BulletAngle(double accuracy, double angle, double pitch)
	{
		Vector3 v = (0, 0, 0);

		if (accuracy > 10)
		{
			// Generate random vector in sphere section
			Vector3 axis = (Cos(pitch) * Cos(angle), Cos(pitch) * Sin(angle), -Sin(pitch));
			while (v == (0, 0, 0) || v.Length() > 1 || ACos(axis dot v.Unit()) > accuracy)
			{
				v = (FRandom(-1, 1), FRandom(-1, 1), FRandom(-1, 1));
			}

			// Extract angle and pitch from trajectory
			angle = VectorAngle(v.x, v.y);
			pitch = -ASin(v.z / v.Length());
		}
		else if (accuracy > 0)
		{
			// Generate random vector in sphere around end of axis
			double r = Sin(accuracy);
			while (v == (0, 0, 0) || v.Length() > r)
			{
				v = (FRandom(-r, r), FRandom(-r, r), FRandom(-r, r));
			}

			Vector3 axis = (Cos(pitch) * Cos(angle), Cos(pitch) * Sin(angle), -Sin(pitch));
			v += axis;

			// Extract angle and pitch from trajectory
			angle = VectorAngle(v.x, v.y);
			pitch = -ASin(v.z / v.Length());
		}

		return angle, pitch;
	}
	bool PFShotDirected;
	int PFCooldown;
	bool OneBarrel;
	array <Actor> projs;
	action void A_FireFrozenProjectiles() {
		if (!invoker.PFShotDirected)
		{
			double atkheight = height * 0.5 - floorclip + player.mo.AttackZOffset*player.crouchFactor;
			// fire linetrace:
			FlineTraceData trc;
			LineTrace(angle, 4096, pitch, TRF_SOLIDACTORS, atkheight, data: trc);
			// record the point that your linetrace hit:
			Vector3 pTargetPos = trc.HitLocation;

			for (int i = 0; i < invoker.projs.Size(); i++) {
				let proj = invoker.projs[i];
				// do nothing if the pointer is invalid, or
				// the projectile still has the RIPPER flag:
				if (!proj || proj.bRIPPER) {
					continue;
				}
				// otherwise...

				// get a vector from projectile's position to target position:
				vector3 diff = LevelLocals.Vec3Diff(proj.pos, pTargetPos);
				// normalize that vector (this converts it into a direction):
				vector3 dir = diff.unit(); 

				// make the projectile fly towards the target point with
				// its speed value:
				proj.vel = proj.speed * dir;
				invoker.PFShotDirected = true;
				invoker.PFCooldown = 0;
				A_Overlay(2, "GunCooldown"); // start 3sec timer
				A_StartSound("weapons/ok00"); // play noise
			}

			// clear the array:
			invoker.projs.Clear();
		}
	}
	Default
	{
		Inventory.PickupMessage "Picked up the P.F. Super Shotgun!";
		Obituary "Shouldn't see this.";
		Tag "Perfect Freeze Super Shotgun";
		Weapon.AmmoUse 2;
		Weapon.AmmoType "GWM_IceShell";
		Weapon.AmmoUse2 1;
		Weapon.AmmoType2 "GWM_IceShell";
	}
	States
	{
		Ready:
			PFSH A 1 A_WeaponReady(WRF_ALLOWZOOM);
			Loop;
		Deselect:
			PFSH A 1 A_Lower;
			PFSH A 0 A_Lower;
			Loop;
		Select:
			PFSH A 1 A_Raise;
			PFSH A 0 A_Raise;
			TNT1 A 0 {invoker.PFShotDirected = false;} // hacky fix
			Loop;
		Fire:
			TNT1 A 0 {if (invoker.OneBarrel) {player.SetPSprite(OverlayID(), ResolveState("AltFire"));}}
			PFSH A 1 {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				invoker.DepleteAmmo(false); // two ice shells

				for (int i; i < 20; i++) {
					actor p = A_FireProjectile("GWM_PerfectFreezeBullet", frandom(-7.5, 7.5), useammo: false, pitch: frandom(-3.55, 3.55));
					if (p) {
						invoker.projs.Push(p);
					}
				}
				A_StartSound("weapons/pfshot1", CHAN_WEAPON);
				A_Overlay(-2, "Flash1");
				A_Overlay(-3, "Flash2");
				A_SpawnItemEx("GWM_IceFlash");
				A_WeaponOffset(0, 24, WOF_ADD);
				A_OverlayScale(OverlayID(), 1.30, 0, WOF_INTERPOLATE);
			}
			PFSH A 2;
			PFSH AA 2 {
				A_WeaponOffset(0, -12, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.15, 0, WOF_ADD);
			}
			TNT1 A 0 A_CheckReload;
			PFSH A 4 {A_WeaponOffset(0, 32, WOF_INTERPOLATE); A_OverlayScale(OverlayID(), 1, 0, WOF_INTERPOLATE);}
			Goto Reload;
		AltFire:
			PFSH A 1 {
				invoker.DepleteAmmo(true); // depletes one ice shell
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				invoker.OneBarrel = !invoker.OneBarrel;
				if (invoker.OneBarrel) {
					A_Overlay(-2, "Flash1");
				}
				else {
					A_Overlay(-3, "Flash2");
				}
				for (int i; i < 10; i++) {
					actor p = A_FireProjectile("GWM_PerfectFreezeBullet", frandom(-7.5, 7.5), useammo: false, pitch: frandom(-3.55, 3.55));
					if (p) {
						invoker.projs.Push(p);
					}
				}
				A_StartSound("weapons/pfshot2", CHAN_WEAPON);
				A_SpawnItemEx("GWM_IceFlash");
				A_WeaponOffset(0, 12, WOF_ADD);
				A_OverlayScale(OverlayID(), 1.15, 0, WOF_INTERPOLATE);
			}
			PFSH A 2;
			PFSH AA 2 {
				A_WeaponOffset(0, -6, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.075, 0, WOF_ADD);
			}
			TNT1 A 0 A_CheckReload;
			PFSH A 4 {A_WeaponOffset(0, 32, WOF_INTERPOLATE); A_OverlayScale(OverlayID(), 1, 0, WOF_INTERPOLATE); if (!invoker.OneBarrel) {player.SetPSprite(OverlayID(), ResolveState("Reload"));}}
			Goto Ready;
		Reload:
			PFSH DB 2;
			PFSH C 3;
			PFSH B 4;
			PFSH D 3;
			PFSH E 2 {
				A_StartSound("weapons/ssgo", CHAN_WEAPON);
				ZWL_EjectCasing("GWM_IceShotgunCasing", true);
				ZWL_EjectCasing("GWM_IceShotgunCasing", true, offset: (24, 4, -10));
			}
			PFSH EFGH 2;
			PFSH I 3 A_StartSound("weapons/ssgl", CHAN_WEAPON);
			PFSH JKK 2 A_OverlayPivotAlign(OverlayID(), PSPA_LEFT, PSPA_BOTTOM);
			PFSH KKK 1 {
				A_OverlayOffset(OverlayID(), 5, 10, WOF_ADD);
				A_OverlayRotate(OverlayID(), 5, WOF_ADD);
			}
			PFSH D 3 {
				A_OverlayRotate(OverlayID(), 0);
				A_OverlayOffset(OverlayID(), 0);
				invoker.OneBarrel = false;
			}
			PFSH L 6 A_StartSound("weapons/ssgc", CHAN_WEAPON);
			PFSH A 5;
			Goto Ready;
		Zoom:
			TNT1 A 0 A_FireFrozenProjectiles;
			Goto Ready;
		Flash1:
			TNT1 A 0 A_OverlayOffset(OverlayID(), 148, 106);
			Goto Flash;
		Flash2:
			TNT1 A 0 A_OverlayOffset(OverlayID(), 168, 106);
			Goto Flash;
		Flash:
			SGFL ABCCDE 1 Bright A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
			Stop;
		Spawn:
			PFSH Z -1;
			Stop;
		LightOff:
			PFSH M 1;
			Loop;
		GunCooldown:
			TNT1 A 1 {
				if (invoker.PFCooldown < 3*35 - 1) {
					invoker.PFCooldown++;
					let psp = player.FindPSprite(PSP_Weapon); // check weapon state
					if (psp)
					{
						if (InStateSequence(psp.curstate, ResolveState("Fire")) || InStateSequence(psp.curstate, ResolveState("AltFire")) || InStateSequence(psp.curstate, ResolveState("Reload")) || InStateSequence(psp.curstate, ResolveState("Select")) || InStateSequence(psp.curstate, ResolveState("Deselect")))
						{
							A_ClearOverlays(3, 3); // does NOT include self
						}
						else {A_Overlay(3, "LightOff");}
					}
					return; // not done yet
				}
				else {
					// okay NOW we're done, destroy the overlays
					invoker.PFShotDirected = false;
					A_StartSound("weapons/powerup");
					A_ClearOverlays(2, 3); // includes self
				}
			}
			Loop;
	}
}