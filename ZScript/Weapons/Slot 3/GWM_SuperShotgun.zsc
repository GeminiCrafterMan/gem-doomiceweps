class GWM_SuperShotgun : GWM_WeaponBase
{	
	int SSGShellstoEject;
	
	Default
	{
		//$Category Weapons
		//$Title "Super Shotgun
		Weapon.SelectionOrder 1300;
		Inventory.PickupSound "weapons/ssgpickup";
		Weapon.UpSound "weapons/draw_primary";
		Weapon.AmmoType "GWM_Shell";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8; // Setting it any higher gives too much in the magazine!!

		ZWeapon.MagazineSize 2;
		ZWeapon.ReloadSound "weapons/ssgl";
		ZWeapon.ClickSound "weapons/skempty";

		Inventory.PickupMessage "$GOTSUPERSHOTGUN";
		Obituary "$KILLSUPERSHOTGUN";
		Tag "$TAG_SUPERSHOTGUN";
	}
	States
	{
		Ready:
			SSGG A 1 ZWL_WeaponReady;
			Loop;
/*		Deselect:
			SSGG A 1 A_Lower(18);
			Loop;
		Select:
			SSGG A 1 A_Raise(18);
			Loop;*/
		Select:
			TNT1 A 0 {
				ZWL_QuickRaise();
				A_WeaponOffset(64, 160);
			}
			SSGG LLLLLL 1 {
				A_WeaponOffset(-8, -16, WOF_ADD);
			}
			SSGG MM 1 {
				A_WeaponOffset(-8, -16, WOF_ADD);
			}
			SSGG N 1 {
				A_StartSound("weapons/ssgc");
				ZWL_WeaponReady();
			}
			SSGG OOBBCCDD 1 ZWL_WeaponReady;
			Goto Ready;
		Deselect:
			SSGG AA 1 {
				A_WeaponOffset(8, 16, WOF_ADD);
			}
			SSGG AAAAAA 1 {
				A_WeaponOffset(8, 16, WOF_ADD);
			}
			TNT1 A 0 A_WeaponOffset(0, flags: WOF_KEEPY);
			TNT1 A 0 ZWL_QuickLower;
			Stop;
		Recoil:
			TNT1 AAA 1 A_SetPitch(pitch+1.5);
			TNT1 AAAAAA 1 A_SetPitch(pitch-0.75);
			Stop;
			
		Recoil2:
			TNT1 AA 1 A_SetPitch(pitch+0.80);
			TNT1 AAAAAA 1 A_SetPitch(pitch-0.40);
			Stop;
		Fire:
			TNT1 A 0 {
			// G: What the fuck
			// G: Why does this fix that issue (ssg primary randomly deselects when you have no reserve ammo)
			// G: NEVERMIND IT DOESN'T!!!!
				if (invoker.ammoCount <= 1)
				{
					invoker.bALTFIRE = true;
					player.SetPSprite(OverlayID(), ResolveState("AltFire"));
				}
			}
			SSGG A 2 {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				A_WeaponOffset(0, 12, WOF_ADD);
				ZWL_FireHitscan(0, 0, pellets: 24, spread: 12, pufftype: "ZBulletPuff_SSG", tracertype: "GWM_SSGShot");
				invoker.ammoCount -= 1;
				A_StartSound("weapons/ssgshot1", CHAN_WEAPON);
				A_GunFlash();
				A_SpawnItemEx("GWM_MuzzleFlashLight3",0,0,5);
				A_SpawnItemEx("GWM_Flash");
				A_Overlay(55,"Recoil");
				A_ChangeVelocity(-Cos(pitch)*4, 0, sin(pitch)*4,CVF_RELATIVE);
				A_OverlayScale(OverlayID(), 1.30, 0, WOF_INTERPOLATE);
				A_QuakeEx(3, 3, 3, 4, 0, 1, "", QF_SHAKEONLY);
				//invoker.SSGShellstoEject = invoker.SSGShellstoEject+1;
			}
			SSGG AA 2 {
				A_WeaponOffset(0, -6, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.15, 0, WOF_ADD);
			}
			//TNT1 A 0 A_JumpifInventory("PowerWeaponLevel2",1,"Ready");
			Goto Ready;
		AltFire:
			TNT1 A 0 {
				if (invoker.ammoCount <= 0)
				{
					if (FindInventory(invoker.ammoType1).amount > 0)
						player.SetPSprite(OverlayID(), ResolveState("Reload.Empty"));
					else
						ZWL_CheckReload(true);
				}
			}
			SSGG A 2 {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				if (invoker.ammoCount % 2) {
					A_Overlay(PSP_FLASH, "FlashRight");
				}
				else {
					A_Overlay(PSP_FLASH, "FlashLeft");
				}
				//ZWL_FireHitscan(0, 12, pellets: 10, spread: 3.5, tracertype: "GWM_Tracer");
				ZWL_FireHitscan(0, 0, pellets: 10, spread: 7, pufftype: "ZBulletPuff_SSG", tracertype: "GWM_SSGShot2", flags: ZHF_DontUseAmmo);
				A_ChangeVelocity(-Cos(pitch)*2.5, 0, sin(pitch)*2.5,CVF_RELATIVE);
				A_StartSound("weapons/ssgshot2", CHAN_WEAPON);
				A_Overlay(55,"Recoil2");
				A_SpawnItemEx("GWM_MuzzleFlashLight2",0,0,5);
				A_SpawnItemEx("GWM_Flash");
				A_WeaponOffset(0, 12, WOF_ADD);
				A_OverlayScale(OverlayID(), 1.15, 0, WOF_INTERPOLATE);
				A_QuakeEx(1.5, 1.5, 1.5, 4, 0, 1, "", QF_SHAKEONLY);
				invoker.ammoCount -= 1;
			}
			SSGG AA 2 {
				A_WeaponOffset(0, -6, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.075, 0, WOF_ADD);
			}
			SSGG A 4 {
				A_WeaponOffset(0, 32, WOF_INTERPOLATE);
				A_OverlayScale(OverlayID(), 1, 0, WOF_INTERPOLATE);
			}
			Goto Ready;
		Reload:
			TNT1 A 0 {
				if (!invoker.CheckAmmo(PrimaryFire, false, true))
					player.SetPSPrite(OverlayID(), ResolveState("Ready")); // Disallow reloading if there's no more ammo
				if (invoker.ammoCount >= invoker.magazineSize)
					player.SetPSPrite(OverlayID(), ResolveState("Ready")); // Disallow reloading if there's no more ammo
				if (invoker.ammoCount <= 0)
					if (FindInventory(invoker.ammoType1).amount > 0)
						player.SetPSprite(OverlayID(), ResolveState("Reload.Empty"));
					else
					{
						invoker.bALTFIRE = false;
						ZWL_CheckReload();
					}
			}
			SSGG D 2;
			SSGG C 2;
			SSGG B 3;
			SSGG C 4;
			SSGG D 3;
			SSGG E 3 A_StartSound("weapons/ssgo", CHAN_BODY);
			SSGG P 2 ZWL_EjectCasing("GWM_ShotgunCasing", true);
			SSGG PQRS 2;
			Goto Reload.End;
		Reload.Empty:
			SSGG D 2;
			SSGG C 2;
			SSGG B 3;
			SSGG C 4;
			SSGG D 3;
			SSGG E 3 A_StartSound("weapons/ssgo", CHAN_BODY);
		EjectSomeSSGShells:
			SSGG F 2 
			{
				//A_StartSound("weapons/ssgo", CHAN_BODY);
				ZWL_EjectCasing("GWM_ShotgunCasing", true);
				ZWL_EjectCasing("GWM_ShotgunCasing", true, offset: (24, 4, -10));
				//invoker.SSGShellstoEject = invoker.SSGShellstoEject;
			}
			SSGG F 1;
			//{ if ( !invoker.SSGShellstoEject == 0) { SetStateLabel("EjectSomeSSGShells");}}
			//goto EjectSomeSSGShells;
		EjectSomeSSGShells.End:
			SSGG FGHI 2;
		Reload.End:
			SSGG J 3 ZWL_Reload();
			SSGG KLL 2;
			SSGG MMM 1;
			SSGG N 3 A_StartSound("weapons/ssgc", CHAN_BODY);
			SSGG O 5;
			SSGG A 1;
			Goto Ready;
		Flash:
			TNT1 A 0 A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
			SSGF A 2 Bright {
				A_Light1();
				A_OverlayScale(OverlayID(), 1.30, 0, WOF_INTERPOLATE);
			}
			SSGF B 2 Bright {
				A_Light2();
				A_OverlayScale(OverlayID(), -0.15, 0, WOF_ADD);
			}
			Goto LightDone;
		FlashLeft:
			SSGF C 2 Bright {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayScale(OverlayID(), 1.15, 0, WOF_INTERPOLATE);
				A_Light2();
			}
			SSGF D 2 Bright {
				A_OverlayScale(OverlayID(), -0.075, 0, WOF_ADD);
				A_Light2();
			}
			Goto LightDone;
		FlashRight:
			SSGF E 2 Bright {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayScale(OverlayID(), 1.15, 0, WOF_INTERPOLATE);
				A_Light2();
			}
			SSGF F 2 Bright {
				A_OverlayScale(OverlayID(), -0.075, 0, WOF_ADD);
				A_Light2();
			}
			Goto LightDone;
		Spawn:
			SSGG Z -1;
			Stop;
	}
}
class ZBulletPuff_SSG : ZBulletPuff
{
    Default
    {
        +PUFFGETSOWNER
        +PUFFONACTORS
        +HITTRACER
    }
    States
    {
    XDeath:
        TNT1 A 1
        {
            if (tracer && target && target.Distance3D(tracer) < 80)
            {
                bExtremeDeath = true;
            }
        }
        Stop;
    }
}

class GWM_SSGShot : FastProjectile
{
	Default
	{
		RenderStyle "Add";
		Radius 2;
		Height 2;
		Speed 150;
		+BLOODSPLATTER
		+HITTRACER
		+NOINTERACTION
		Scale .5;
		DamageFunction (13);
		//MissileType "GWM_TracerTrail";
		MissileHeight 8;
		+EXTREMEDEATH;
	}
	States
	{
		Dummy:
			TRAC A 1 Bright;
			Loop;
		Spawn:
			TRAC A 1 BRIGHT;
			TNT1 A 0 {bEXTREMEDEATH = false;}
			Loop;
		Crash:
			TNT1 A 0 A_Jump(256,"Death");
		Death:
			PUFF A 2 BRIGHT A_SpawnDebris("GWM_TracerSpark");
			PUFF B 1 BRIGHT A_SetTranslucent(0.9,0);
			PUFF B 1 BRIGHT A_PlaySound("bullet/ricochet",CHAN_BODY,.5);
			PUFF CD 2 BRIGHT;
			Stop;
		XDeath:
			TNT1 A 3 A_PlaySound("bullet/hitFlesh",CHAN_BODY,.5);
			Stop;
	}
}

class GWM_SSGShot2 : FastProjectile
{
	Default
	{
		RenderStyle "Add";
		Radius 2;
		Height 2;
		Speed 150;
		+BLOODSPLATTER
		+HITTRACER
		+NOINTERACTION
		Scale .4;
		DamageFunction (10);
		//MissileType "GWM_TracerTrail";
		MissileHeight 8;
	}
	States
	{
		Dummy:
			TRAC A 1 Bright;
			Loop;
		Spawn:
			TRAC A 2 BRIGHT;
			Loop;
		Crash:
			TNT1 A 0 A_Jump(256,"Death");
		Death:
			PUFF A 2 BRIGHT A_SpawnDebris("GWM_TracerSpark");
			PUFF B 1 BRIGHT A_SetTranslucent(0.9,0);
			PUFF B 1 BRIGHT A_PlaySound("bullet/ricochet",CHAN_BODY,.5);
			PUFF CD 2 BRIGHT;
			Stop;
		XDeath:
			TNT1 A 3 A_PlaySound("bullet/hitFlesh",CHAN_BODY,.5);
			Stop;
	}
}