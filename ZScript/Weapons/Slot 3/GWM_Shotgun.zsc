class GWM_Shotgun : Shotgun
{
	/*
	Ejects a bullet casing to the side.
	Params:
	 - casingType: Type of actor to eject.
	 - left: If true, casing ejects to the left. Otherwise it ejects to the right.
	 - ejectPitch: Pitch at which casing ejects, relative to view direction.
	 - speed: Speed at which casing ejects.
	 - accuracy: Random spread, in degrees.
	 - offset: Offset from which casing is ejected, relative to center of view.
	*/
	action void ZWL_EjectCasing(class<Actor> casingType, bool left = false, double ejectPitch = -45, double speed = 4,
								double accuracy = 8, Vector3 offset = (24, 0, -10))
	{
		// Find offset vector
		// +y axis is to the right for offsets
		offset.y *= -1;

		// Rotate offset by pitch
		Vector2 xz = RotateVector((offset.x, offset.z), -pitch);
		offset.x = xz.x;
		offset.z = xz.y;

		// Rotate vector by angle
		offset.xy = RotateVector(offset.xy, angle);

		// Move to player camera
		offset.xy += pos.xy;
		offset.z += player.viewZ;

		// Find velocity vector
		Vector3 side = (Cos(angle + (left ? 90 : -90)), Sin(angle + (left ? 90 : -90)), 0);
		Vector3 up = (Cos(pitch-90) * Cos(angle), Cos(pitch-90) * Sin(angle), -Sin(pitch-90));
		Vector3 baseDirection = Cos(-ejectPitch) * side + Sin(-ejectPitch) * up;

		double baseAngle = VectorAngle(baseDirection.x, baseDirection.y);
		baseDirection.xy = RotateVector(baseDirection.xy, -baseAngle);
		double basePitch = -VectorAngle(baseDirection.x, baseDirection.z);

		double casAngle, casPitch;
		[casAngle, casPitch] = invoker.BulletAngle(accuracy, baseAngle, basePitch);

		let casing = Spawn(casingType, offset);
		casing.Vel3dFromAngle(speed, casAngle, casPitch);
		casing.vel += vel;
	}
	// Returns random angle and pitch within cone
	// I have no idea if there's a better way of doing this ¯\_(ツ)_/¯
	// Params:
	//  - accuracy: maximum angle b/w cone's axis, and bullet trajectory
	//  - angle: angle of axis
	//  - pitch: pitch of axis
	double, double BulletAngle(double accuracy, double angle, double pitch)
	{
		Vector3 v = (0, 0, 0);

		if (accuracy > 10)
		{
			// Generate random vector in sphere section
			Vector3 axis = (Cos(pitch) * Cos(angle), Cos(pitch) * Sin(angle), -Sin(pitch));
			while (v == (0, 0, 0) || v.Length() > 1 || ACos(axis dot v.Unit()) > accuracy)
			{
				v = (FRandom(-1, 1), FRandom(-1, 1), FRandom(-1, 1));
			}

			// Extract angle and pitch from trajectory
			angle = VectorAngle(v.x, v.y);
			pitch = -ASin(v.z / v.Length());
		}
		else if (accuracy > 0)
		{
			// Generate random vector in sphere around end of axis
			double r = Sin(accuracy);
			while (v == (0, 0, 0) || v.Length() > r)
			{
				v = (FRandom(-r, r), FRandom(-r, r), FRandom(-r, r));
			}

			Vector3 axis = (Cos(pitch) * Cos(angle), Cos(pitch) * Sin(angle), -Sin(pitch));
			v += axis;

			// Extract angle and pitch from trajectory
			angle = VectorAngle(v.x, v.y);
			pitch = -ASin(v.z / v.Length());
		}

		return angle, pitch;
	}
	Default
	{
		+THRUGHOST
		Weapon.AmmoType "GWM_Shell";
		Weapon.AmmoType2 "GWM_Shell";
		Weapon.AmmoUse2 1;
		Tag "Slayer's Kahuna";
		Inventory.PickupMessage "$GOTSLAYERSKAHUNA";
		Obituary "$KILLSLAYERSKAHUNA";
		AttackSound "weapons/skshot";
	}
	States
	{
		Ready:
			SKSG A 1 A_WeaponReady;
			Loop;
		Deselect:
			SKSG A 1 A_Lower;
			SKSG A 0 A_Lower;
			Loop;
		Select:
			SKSG A 1 A_Raise;
			SKSG A 0 A_Raise;
			Loop;
		Fire:
			SKSG A 1 Bright {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayPivot(OverlayID(), 0.2, flags: WOF_KEEPY);
				A_FireBullets(2.5, 0.83, 8, 6, "ZBulletPuff");
				A_SpawnItemEx("GWM_Flash");
				A_GunFlash();
				A_WeaponOffset(0, 10, WOF_ADD);
				A_OverlayScale(OverlayID(), 1.15, 0, WOF_INTERPOLATE);
			}
			SKSG A 3 Bright;
			SKSG A 3 Bright {
				A_WeaponOffset(0, -5, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.075, 0, WOF_ADD);
			}
			SKSG A 3 {
				A_WeaponOffset(0, -5, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.075, 0, WOF_ADD);
			}
			SKSG B 5;
			SKSG CCDD 1;
			SKSG E 4 {
				A_StartSound("weapons/skpump1");
				ZWL_EjectCasing("GWM_ShotgunCasing", offset: (24, -6, -14));
			}
			SKSG DDCC 1; // These two play on CHAN_BODY because the firing sound is just too fucking long
			SKSG B 5 A_StartSound("weapons/skpump2");
			SKSG A 3;
			SKSG A 7 A_ReFire;
			Goto Ready;
		AltFire:
			SKSG A 1 Bright {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayPivot(OverlayID(), 0.2, flags: WOF_KEEPY);
				A_FireBullets(7.5, 2.49, 8, 6, "ZBulletPuff");
				A_SpawnItemEx("GWM_Flash");
				A_GunFlash("Flash2");
				A_WeaponOffset(0, 20, WOF_ADD);
				A_OverlayScale(OverlayID(), 1.30, 0, WOF_INTERPOLATE);
			}
			SKSG A 3 Bright;
			SKSG A 3 Bright {
				A_WeaponOffset(0, -10, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.15, 0, WOF_ADD);
			}
			SKSG A 3 {
				A_WeaponOffset(0, -10, WOF_ADD);
				A_OverlayScale(OverlayID(), -0.15, 0, WOF_ADD);
			}
			SKSG FFGG 1;
			SKSG H 4 {
				A_StartSound("weapons/skpump1");
				ZWL_EjectCasing("GWM_ShotgunCasing", offset: (20, 4, -14));
			}
			SKSG GGFF 1; // These two play on CHAN_BODY because the firing sound is just too fucking long
			SKSG A 5 A_StartSound("weapons/skpump2");
			SKSG A 7 A_ReFire;
			Goto Ready;
		Spawn:
			SKSG Z -1;
			Stop;
		Flash:
			SKSF A 1 Bright {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayPivot(OverlayID(), 0.2, flags: WOF_KEEPY);
				A_Light1();
				A_OverlayScale(OverlayID(), 1.15, 0, WOF_INTERPOLATE);
			}
			SKSF A 3 Bright A_Light1;
			SKSF B 3 Bright {
				A_Light2();
				A_OverlayScale(OverlayID(), -0.075, 0, WOF_ADD);
			}
			Goto LightDone;
		Flash2:
			SKSF A 1 Bright {
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_BOTTOM);
				A_OverlayPivot(OverlayID(), 0.2, flags: WOF_KEEPY);
				A_Light1();
				A_OverlayScale(OverlayID(), 1.30, 0, WOF_INTERPOLATE);
			}
			SKSF A 3 Bright A_Light1;
			SKSF B 3 Bright {
				A_Light2();
				A_OverlayScale(OverlayID(), -0.15, 0, WOF_ADD);
			}
			Goto LightDone;
	}
}